// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mangaweb4/mangaweb4-backend/ent/tag"
	"github.com/mangaweb4/mangaweb4-backend/ent/taguser"
	"github.com/mangaweb4/mangaweb4-backend/ent/user"
)

// TagUserCreate is the builder for creating a TagUser entity.
type TagUserCreate struct {
	config
	mutation *TagUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTagID sets the "tag_id" field.
func (tuc *TagUserCreate) SetTagID(i int) *TagUserCreate {
	tuc.mutation.SetTagID(i)
	return tuc
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tuc *TagUserCreate) SetNillableTagID(i *int) *TagUserCreate {
	if i != nil {
		tuc.SetTagID(*i)
	}
	return tuc
}

// SetUserID sets the "user_id" field.
func (tuc *TagUserCreate) SetUserID(i int) *TagUserCreate {
	tuc.mutation.SetUserID(i)
	return tuc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuc *TagUserCreate) SetNillableUserID(i *int) *TagUserCreate {
	if i != nil {
		tuc.SetUserID(*i)
	}
	return tuc
}

// SetIsRead sets the "is_read" field.
func (tuc *TagUserCreate) SetIsRead(b bool) *TagUserCreate {
	tuc.mutation.SetIsRead(b)
	return tuc
}

// SetIsFavorite sets the "is_favorite" field.
func (tuc *TagUserCreate) SetIsFavorite(b bool) *TagUserCreate {
	tuc.mutation.SetIsFavorite(b)
	return tuc
}

// SetTag sets the "tag" edge to the Tag entity.
func (tuc *TagUserCreate) SetTag(t *Tag) *TagUserCreate {
	return tuc.SetTagID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuc *TagUserCreate) SetUser(u *User) *TagUserCreate {
	return tuc.SetUserID(u.ID)
}

// Mutation returns the TagUserMutation object of the builder.
func (tuc *TagUserCreate) Mutation() *TagUserMutation {
	return tuc.mutation
}

// Save creates the TagUser in the database.
func (tuc *TagUserCreate) Save(ctx context.Context) (*TagUser, error) {
	return withHooks(ctx, tuc.sqlSave, tuc.mutation, tuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TagUserCreate) SaveX(ctx context.Context) *TagUser {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuc *TagUserCreate) Exec(ctx context.Context) error {
	_, err := tuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuc *TagUserCreate) ExecX(ctx context.Context) {
	if err := tuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TagUserCreate) check() error {
	if _, ok := tuc.mutation.IsRead(); !ok {
		return &ValidationError{Name: "is_read", err: errors.New(`ent: missing required field "TagUser.is_read"`)}
	}
	if _, ok := tuc.mutation.IsFavorite(); !ok {
		return &ValidationError{Name: "is_favorite", err: errors.New(`ent: missing required field "TagUser.is_favorite"`)}
	}
	return nil
}

func (tuc *TagUserCreate) sqlSave(ctx context.Context) (*TagUser, error) {
	if err := tuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tuc.mutation.id = &_node.ID
	tuc.mutation.done = true
	return _node, nil
}

func (tuc *TagUserCreate) createSpec() (*TagUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TagUser{config: tuc.config}
		_spec = sqlgraph.NewCreateSpec(taguser.Table, sqlgraph.NewFieldSpec(taguser.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tuc.conflict
	if value, ok := tuc.mutation.IsRead(); ok {
		_spec.SetField(taguser.FieldIsRead, field.TypeBool, value)
		_node.IsRead = value
	}
	if value, ok := tuc.mutation.IsFavorite(); ok {
		_spec.SetField(taguser.FieldIsFavorite, field.TypeBool, value)
		_node.IsFavorite = value
	}
	if nodes := tuc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.TagTable,
			Columns: []string{taguser.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.UserTable,
			Columns: []string{taguser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TagUser.Create().
//		SetTagID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagUserUpsert) {
//			SetTagID(v+v).
//		}).
//		Exec(ctx)
func (tuc *TagUserCreate) OnConflict(opts ...sql.ConflictOption) *TagUserUpsertOne {
	tuc.conflict = opts
	return &TagUserUpsertOne{
		create: tuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TagUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tuc *TagUserCreate) OnConflictColumns(columns ...string) *TagUserUpsertOne {
	tuc.conflict = append(tuc.conflict, sql.ConflictColumns(columns...))
	return &TagUserUpsertOne{
		create: tuc,
	}
}

type (
	// TagUserUpsertOne is the builder for "upsert"-ing
	//  one TagUser node.
	TagUserUpsertOne struct {
		create *TagUserCreate
	}

	// TagUserUpsert is the "OnConflict" setter.
	TagUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetTagID sets the "tag_id" field.
func (u *TagUserUpsert) SetTagID(v int) *TagUserUpsert {
	u.Set(taguser.FieldTagID, v)
	return u
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagUserUpsert) UpdateTagID() *TagUserUpsert {
	u.SetExcluded(taguser.FieldTagID)
	return u
}

// ClearTagID clears the value of the "tag_id" field.
func (u *TagUserUpsert) ClearTagID() *TagUserUpsert {
	u.SetNull(taguser.FieldTagID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *TagUserUpsert) SetUserID(v int) *TagUserUpsert {
	u.Set(taguser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TagUserUpsert) UpdateUserID() *TagUserUpsert {
	u.SetExcluded(taguser.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *TagUserUpsert) ClearUserID() *TagUserUpsert {
	u.SetNull(taguser.FieldUserID)
	return u
}

// SetIsRead sets the "is_read" field.
func (u *TagUserUpsert) SetIsRead(v bool) *TagUserUpsert {
	u.Set(taguser.FieldIsRead, v)
	return u
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *TagUserUpsert) UpdateIsRead() *TagUserUpsert {
	u.SetExcluded(taguser.FieldIsRead)
	return u
}

// SetIsFavorite sets the "is_favorite" field.
func (u *TagUserUpsert) SetIsFavorite(v bool) *TagUserUpsert {
	u.Set(taguser.FieldIsFavorite, v)
	return u
}

// UpdateIsFavorite sets the "is_favorite" field to the value that was provided on create.
func (u *TagUserUpsert) UpdateIsFavorite() *TagUserUpsert {
	u.SetExcluded(taguser.FieldIsFavorite)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TagUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TagUserUpsertOne) UpdateNewValues() *TagUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TagUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TagUserUpsertOne) Ignore() *TagUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagUserUpsertOne) DoNothing() *TagUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagUserCreate.OnConflict
// documentation for more info.
func (u *TagUserUpsertOne) Update(set func(*TagUserUpsert)) *TagUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetTagID sets the "tag_id" field.
func (u *TagUserUpsertOne) SetTagID(v int) *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagUserUpsertOne) UpdateTagID() *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateTagID()
	})
}

// ClearTagID clears the value of the "tag_id" field.
func (u *TagUserUpsertOne) ClearTagID() *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.ClearTagID()
	})
}

// SetUserID sets the "user_id" field.
func (u *TagUserUpsertOne) SetUserID(v int) *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TagUserUpsertOne) UpdateUserID() *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *TagUserUpsertOne) ClearUserID() *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.ClearUserID()
	})
}

// SetIsRead sets the "is_read" field.
func (u *TagUserUpsertOne) SetIsRead(v bool) *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.SetIsRead(v)
	})
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *TagUserUpsertOne) UpdateIsRead() *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateIsRead()
	})
}

// SetIsFavorite sets the "is_favorite" field.
func (u *TagUserUpsertOne) SetIsFavorite(v bool) *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.SetIsFavorite(v)
	})
}

// UpdateIsFavorite sets the "is_favorite" field to the value that was provided on create.
func (u *TagUserUpsertOne) UpdateIsFavorite() *TagUserUpsertOne {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateIsFavorite()
	})
}

// Exec executes the query.
func (u *TagUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TagUserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TagUserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TagUserCreateBulk is the builder for creating many TagUser entities in bulk.
type TagUserCreateBulk struct {
	config
	err      error
	builders []*TagUserCreate
	conflict []sql.ConflictOption
}

// Save creates the TagUser entities in the database.
func (tucb *TagUserCreateBulk) Save(ctx context.Context) ([]*TagUser, error) {
	if tucb.err != nil {
		return nil, tucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TagUser, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TagUserCreateBulk) SaveX(ctx context.Context) []*TagUser {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tucb *TagUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tucb *TagUserCreateBulk) ExecX(ctx context.Context) {
	if err := tucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TagUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagUserUpsert) {
//			SetTagID(v+v).
//		}).
//		Exec(ctx)
func (tucb *TagUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *TagUserUpsertBulk {
	tucb.conflict = opts
	return &TagUserUpsertBulk{
		create: tucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TagUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tucb *TagUserCreateBulk) OnConflictColumns(columns ...string) *TagUserUpsertBulk {
	tucb.conflict = append(tucb.conflict, sql.ConflictColumns(columns...))
	return &TagUserUpsertBulk{
		create: tucb,
	}
}

// TagUserUpsertBulk is the builder for "upsert"-ing
// a bulk of TagUser nodes.
type TagUserUpsertBulk struct {
	create *TagUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TagUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TagUserUpsertBulk) UpdateNewValues() *TagUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TagUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TagUserUpsertBulk) Ignore() *TagUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagUserUpsertBulk) DoNothing() *TagUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagUserCreateBulk.OnConflict
// documentation for more info.
func (u *TagUserUpsertBulk) Update(set func(*TagUserUpsert)) *TagUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetTagID sets the "tag_id" field.
func (u *TagUserUpsertBulk) SetTagID(v int) *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagUserUpsertBulk) UpdateTagID() *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateTagID()
	})
}

// ClearTagID clears the value of the "tag_id" field.
func (u *TagUserUpsertBulk) ClearTagID() *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.ClearTagID()
	})
}

// SetUserID sets the "user_id" field.
func (u *TagUserUpsertBulk) SetUserID(v int) *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TagUserUpsertBulk) UpdateUserID() *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *TagUserUpsertBulk) ClearUserID() *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.ClearUserID()
	})
}

// SetIsRead sets the "is_read" field.
func (u *TagUserUpsertBulk) SetIsRead(v bool) *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.SetIsRead(v)
	})
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *TagUserUpsertBulk) UpdateIsRead() *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateIsRead()
	})
}

// SetIsFavorite sets the "is_favorite" field.
func (u *TagUserUpsertBulk) SetIsFavorite(v bool) *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.SetIsFavorite(v)
	})
}

// UpdateIsFavorite sets the "is_favorite" field to the value that was provided on create.
func (u *TagUserUpsertBulk) UpdateIsFavorite() *TagUserUpsertBulk {
	return u.Update(func(s *TagUserUpsert) {
		s.UpdateIsFavorite()
	})
}

// Exec executes the query.
func (u *TagUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TagUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
