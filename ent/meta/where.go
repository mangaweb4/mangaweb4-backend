// Code generated by ent, DO NOT EDIT.

package meta

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/wutipong/mangaweb3-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldName, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldCreateTime, v))
}

// Favorite applies equality check predicate on the "favorite" field. It's identical to FavoriteEQ.
func Favorite(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldFavorite, v))
}

// Read applies equality check predicate on the "read" field. It's identical to ReadEQ.
func Read(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldRead, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldActive, v))
}

// Hidden applies equality check predicate on the "hidden" field. It's identical to HiddenEQ.
func Hidden(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldHidden, v))
}

// ThumbnailIndex applies equality check predicate on the "thumbnail_index" field. It's identical to ThumbnailIndexEQ.
func ThumbnailIndex(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailIndex, v))
}

// ThumbnailX applies equality check predicate on the "thumbnail_x" field. It's identical to ThumbnailXEQ.
func ThumbnailX(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailX, v))
}

// ThumbnailY applies equality check predicate on the "thumbnail_y" field. It's identical to ThumbnailYEQ.
func ThumbnailY(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailY, v))
}

// ThumbnailWidth applies equality check predicate on the "thumbnail_width" field. It's identical to ThumbnailWidthEQ.
func ThumbnailWidth(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailWidth, v))
}

// ThumbnailHeight applies equality check predicate on the "thumbnail_height" field. It's identical to ThumbnailHeightEQ.
func ThumbnailHeight(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailHeight, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Meta {
	return predicate.Meta(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Meta {
	return predicate.Meta(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Meta {
	return predicate.Meta(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Meta {
	return predicate.Meta(sql.FieldContainsFold(FieldName, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldCreateTime, v))
}

// FavoriteEQ applies the EQ predicate on the "favorite" field.
func FavoriteEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldFavorite, v))
}

// FavoriteNEQ applies the NEQ predicate on the "favorite" field.
func FavoriteNEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldFavorite, v))
}

// ReadEQ applies the EQ predicate on the "read" field.
func ReadEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldRead, v))
}

// ReadNEQ applies the NEQ predicate on the "read" field.
func ReadNEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldRead, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldActive, v))
}

// HiddenEQ applies the EQ predicate on the "hidden" field.
func HiddenEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldHidden, v))
}

// HiddenNEQ applies the NEQ predicate on the "hidden" field.
func HiddenNEQ(v bool) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldHidden, v))
}

// ContainerTypeEQ applies the EQ predicate on the "container_type" field.
func ContainerTypeEQ(v ContainerType) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldContainerType, v))
}

// ContainerTypeNEQ applies the NEQ predicate on the "container_type" field.
func ContainerTypeNEQ(v ContainerType) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldContainerType, v))
}

// ContainerTypeIn applies the In predicate on the "container_type" field.
func ContainerTypeIn(vs ...ContainerType) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldContainerType, vs...))
}

// ContainerTypeNotIn applies the NotIn predicate on the "container_type" field.
func ContainerTypeNotIn(vs ...ContainerType) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldContainerType, vs...))
}

// ThumbnailIndexEQ applies the EQ predicate on the "thumbnail_index" field.
func ThumbnailIndexEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailIndex, v))
}

// ThumbnailIndexNEQ applies the NEQ predicate on the "thumbnail_index" field.
func ThumbnailIndexNEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldThumbnailIndex, v))
}

// ThumbnailIndexIn applies the In predicate on the "thumbnail_index" field.
func ThumbnailIndexIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldThumbnailIndex, vs...))
}

// ThumbnailIndexNotIn applies the NotIn predicate on the "thumbnail_index" field.
func ThumbnailIndexNotIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldThumbnailIndex, vs...))
}

// ThumbnailIndexGT applies the GT predicate on the "thumbnail_index" field.
func ThumbnailIndexGT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldThumbnailIndex, v))
}

// ThumbnailIndexGTE applies the GTE predicate on the "thumbnail_index" field.
func ThumbnailIndexGTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldThumbnailIndex, v))
}

// ThumbnailIndexLT applies the LT predicate on the "thumbnail_index" field.
func ThumbnailIndexLT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldThumbnailIndex, v))
}

// ThumbnailIndexLTE applies the LTE predicate on the "thumbnail_index" field.
func ThumbnailIndexLTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldThumbnailIndex, v))
}

// ThumbnailIndexIsNil applies the IsNil predicate on the "thumbnail_index" field.
func ThumbnailIndexIsNil() predicate.Meta {
	return predicate.Meta(sql.FieldIsNull(FieldThumbnailIndex))
}

// ThumbnailIndexNotNil applies the NotNil predicate on the "thumbnail_index" field.
func ThumbnailIndexNotNil() predicate.Meta {
	return predicate.Meta(sql.FieldNotNull(FieldThumbnailIndex))
}

// ThumbnailXEQ applies the EQ predicate on the "thumbnail_x" field.
func ThumbnailXEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailX, v))
}

// ThumbnailXNEQ applies the NEQ predicate on the "thumbnail_x" field.
func ThumbnailXNEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldThumbnailX, v))
}

// ThumbnailXIn applies the In predicate on the "thumbnail_x" field.
func ThumbnailXIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldThumbnailX, vs...))
}

// ThumbnailXNotIn applies the NotIn predicate on the "thumbnail_x" field.
func ThumbnailXNotIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldThumbnailX, vs...))
}

// ThumbnailXGT applies the GT predicate on the "thumbnail_x" field.
func ThumbnailXGT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldThumbnailX, v))
}

// ThumbnailXGTE applies the GTE predicate on the "thumbnail_x" field.
func ThumbnailXGTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldThumbnailX, v))
}

// ThumbnailXLT applies the LT predicate on the "thumbnail_x" field.
func ThumbnailXLT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldThumbnailX, v))
}

// ThumbnailXLTE applies the LTE predicate on the "thumbnail_x" field.
func ThumbnailXLTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldThumbnailX, v))
}

// ThumbnailXIsNil applies the IsNil predicate on the "thumbnail_x" field.
func ThumbnailXIsNil() predicate.Meta {
	return predicate.Meta(sql.FieldIsNull(FieldThumbnailX))
}

// ThumbnailXNotNil applies the NotNil predicate on the "thumbnail_x" field.
func ThumbnailXNotNil() predicate.Meta {
	return predicate.Meta(sql.FieldNotNull(FieldThumbnailX))
}

// ThumbnailYEQ applies the EQ predicate on the "thumbnail_y" field.
func ThumbnailYEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailY, v))
}

// ThumbnailYNEQ applies the NEQ predicate on the "thumbnail_y" field.
func ThumbnailYNEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldThumbnailY, v))
}

// ThumbnailYIn applies the In predicate on the "thumbnail_y" field.
func ThumbnailYIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldThumbnailY, vs...))
}

// ThumbnailYNotIn applies the NotIn predicate on the "thumbnail_y" field.
func ThumbnailYNotIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldThumbnailY, vs...))
}

// ThumbnailYGT applies the GT predicate on the "thumbnail_y" field.
func ThumbnailYGT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldThumbnailY, v))
}

// ThumbnailYGTE applies the GTE predicate on the "thumbnail_y" field.
func ThumbnailYGTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldThumbnailY, v))
}

// ThumbnailYLT applies the LT predicate on the "thumbnail_y" field.
func ThumbnailYLT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldThumbnailY, v))
}

// ThumbnailYLTE applies the LTE predicate on the "thumbnail_y" field.
func ThumbnailYLTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldThumbnailY, v))
}

// ThumbnailYIsNil applies the IsNil predicate on the "thumbnail_y" field.
func ThumbnailYIsNil() predicate.Meta {
	return predicate.Meta(sql.FieldIsNull(FieldThumbnailY))
}

// ThumbnailYNotNil applies the NotNil predicate on the "thumbnail_y" field.
func ThumbnailYNotNil() predicate.Meta {
	return predicate.Meta(sql.FieldNotNull(FieldThumbnailY))
}

// ThumbnailWidthEQ applies the EQ predicate on the "thumbnail_width" field.
func ThumbnailWidthEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailWidth, v))
}

// ThumbnailWidthNEQ applies the NEQ predicate on the "thumbnail_width" field.
func ThumbnailWidthNEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldThumbnailWidth, v))
}

// ThumbnailWidthIn applies the In predicate on the "thumbnail_width" field.
func ThumbnailWidthIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldThumbnailWidth, vs...))
}

// ThumbnailWidthNotIn applies the NotIn predicate on the "thumbnail_width" field.
func ThumbnailWidthNotIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldThumbnailWidth, vs...))
}

// ThumbnailWidthGT applies the GT predicate on the "thumbnail_width" field.
func ThumbnailWidthGT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldThumbnailWidth, v))
}

// ThumbnailWidthGTE applies the GTE predicate on the "thumbnail_width" field.
func ThumbnailWidthGTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldThumbnailWidth, v))
}

// ThumbnailWidthLT applies the LT predicate on the "thumbnail_width" field.
func ThumbnailWidthLT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldThumbnailWidth, v))
}

// ThumbnailWidthLTE applies the LTE predicate on the "thumbnail_width" field.
func ThumbnailWidthLTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldThumbnailWidth, v))
}

// ThumbnailWidthIsNil applies the IsNil predicate on the "thumbnail_width" field.
func ThumbnailWidthIsNil() predicate.Meta {
	return predicate.Meta(sql.FieldIsNull(FieldThumbnailWidth))
}

// ThumbnailWidthNotNil applies the NotNil predicate on the "thumbnail_width" field.
func ThumbnailWidthNotNil() predicate.Meta {
	return predicate.Meta(sql.FieldNotNull(FieldThumbnailWidth))
}

// ThumbnailHeightEQ applies the EQ predicate on the "thumbnail_height" field.
func ThumbnailHeightEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldThumbnailHeight, v))
}

// ThumbnailHeightNEQ applies the NEQ predicate on the "thumbnail_height" field.
func ThumbnailHeightNEQ(v int) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldThumbnailHeight, v))
}

// ThumbnailHeightIn applies the In predicate on the "thumbnail_height" field.
func ThumbnailHeightIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldThumbnailHeight, vs...))
}

// ThumbnailHeightNotIn applies the NotIn predicate on the "thumbnail_height" field.
func ThumbnailHeightNotIn(vs ...int) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldThumbnailHeight, vs...))
}

// ThumbnailHeightGT applies the GT predicate on the "thumbnail_height" field.
func ThumbnailHeightGT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldThumbnailHeight, v))
}

// ThumbnailHeightGTE applies the GTE predicate on the "thumbnail_height" field.
func ThumbnailHeightGTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldThumbnailHeight, v))
}

// ThumbnailHeightLT applies the LT predicate on the "thumbnail_height" field.
func ThumbnailHeightLT(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldThumbnailHeight, v))
}

// ThumbnailHeightLTE applies the LTE predicate on the "thumbnail_height" field.
func ThumbnailHeightLTE(v int) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldThumbnailHeight, v))
}

// ThumbnailHeightIsNil applies the IsNil predicate on the "thumbnail_height" field.
func ThumbnailHeightIsNil() predicate.Meta {
	return predicate.Meta(sql.FieldIsNull(FieldThumbnailHeight))
}

// ThumbnailHeightNotNil applies the NotNil predicate on the "thumbnail_height" field.
func ThumbnailHeightNotNil() predicate.Meta {
	return predicate.Meta(sql.FieldNotNull(FieldThumbnailHeight))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHistories applies the HasEdge predicate on the "histories" edge.
func HasHistories() predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HistoriesTable, HistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoriesWith applies the HasEdge predicate on the "histories" edge with a given conditions (other predicates).
func HasHistoriesWith(preds ...predicate.History) predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := newHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFavoriteOfUser applies the HasEdge predicate on the "favorite_of_user" edge.
func HasFavoriteOfUser() predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FavoriteOfUserTable, FavoriteOfUserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavoriteOfUserWith applies the HasEdge predicate on the "favorite_of_user" edge with a given conditions (other predicates).
func HasFavoriteOfUserWith(preds ...predicate.User) predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := newFavoriteOfUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgress applies the HasEdge predicate on the "progress" edge.
func HasProgress() predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgressTable, ProgressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgressWith applies the HasEdge predicate on the "progress" edge with a given conditions (other predicates).
func HasProgressWith(preds ...predicate.Progress) predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := newProgressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Meta) predicate.Meta {
	return predicate.Meta(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Meta) predicate.Meta {
	return predicate.Meta(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Meta) predicate.Meta {
	return predicate.Meta(sql.NotPredicates(p))
}
