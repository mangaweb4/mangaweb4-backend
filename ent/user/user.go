// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgeFavoriteItems holds the string denoting the favorite_items edge name in mutations.
	EdgeFavoriteItems = "favorite_items"
	// EdgeFavoriteTags holds the string denoting the favorite_tags edge name in mutations.
	EdgeFavoriteTags = "favorite_tags"
	// EdgeHistories holds the string denoting the histories edge name in mutations.
	EdgeHistories = "histories"
	// Table holds the table name of the user in the database.
	Table = "users"
	// FavoriteItemsTable is the table that holds the favorite_items relation/edge. The primary key declared below.
	FavoriteItemsTable = "user_favorite_items"
	// FavoriteItemsInverseTable is the table name for the Meta entity.
	// It exists in this package in order to avoid circular dependency with the "meta" package.
	FavoriteItemsInverseTable = "meta"
	// FavoriteTagsTable is the table that holds the favorite_tags relation/edge. The primary key declared below.
	FavoriteTagsTable = "user_favorite_tags"
	// FavoriteTagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	FavoriteTagsInverseTable = "tags"
	// HistoriesTable is the table that holds the histories relation/edge.
	HistoriesTable = "histories"
	// HistoriesInverseTable is the table name for the History entity.
	// It exists in this package in order to avoid circular dependency with the "history" package.
	HistoriesInverseTable = "histories"
	// HistoriesColumn is the table column denoting the histories relation/edge.
	HistoriesColumn = "user_histories"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldActive,
}

var (
	// FavoriteItemsPrimaryKey and FavoriteItemsColumn2 are the table columns denoting the
	// primary key for the favorite_items relation (M2M).
	FavoriteItemsPrimaryKey = []string{"user_id", "meta_id"}
	// FavoriteTagsPrimaryKey and FavoriteTagsColumn2 are the table columns denoting the
	// primary key for the favorite_tags relation (M2M).
	FavoriteTagsPrimaryKey = []string{"user_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByFavoriteItemsCount orders the results by favorite_items count.
func ByFavoriteItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavoriteItemsStep(), opts...)
	}
}

// ByFavoriteItems orders the results by favorite_items terms.
func ByFavoriteItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavoriteItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFavoriteTagsCount orders the results by favorite_tags count.
func ByFavoriteTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavoriteTagsStep(), opts...)
	}
}

// ByFavoriteTags orders the results by favorite_tags terms.
func ByFavoriteTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavoriteTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHistoriesCount orders the results by histories count.
func ByHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHistoriesStep(), opts...)
	}
}

// ByHistories orders the results by histories terms.
func ByHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFavoriteItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavoriteItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FavoriteItemsTable, FavoriteItemsPrimaryKey...),
	)
}
func newFavoriteTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavoriteTagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FavoriteTagsTable, FavoriteTagsPrimaryKey...),
	)
}
func newHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HistoriesTable, HistoriesColumn),
	)
}
