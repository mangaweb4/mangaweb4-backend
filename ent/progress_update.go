// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wutipong/mangaweb3-backend/ent/meta"
	"github.com/wutipong/mangaweb3-backend/ent/predicate"
	"github.com/wutipong/mangaweb3-backend/ent/progress"
	"github.com/wutipong/mangaweb3-backend/ent/user"
)

// ProgressUpdate is the builder for updating Progress entities.
type ProgressUpdate struct {
	config
	hooks    []Hook
	mutation *ProgressMutation
}

// Where appends a list predicates to the ProgressUpdate builder.
func (pu *ProgressUpdate) Where(ps ...predicate.Progress) *ProgressUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPage sets the "page" field.
func (pu *ProgressUpdate) SetPage(i int) *ProgressUpdate {
	pu.mutation.ResetPage()
	pu.mutation.SetPage(i)
	return pu
}

// SetNillablePage sets the "page" field if the given value is not nil.
func (pu *ProgressUpdate) SetNillablePage(i *int) *ProgressUpdate {
	if i != nil {
		pu.SetPage(*i)
	}
	return pu
}

// AddPage adds i to the "page" field.
func (pu *ProgressUpdate) AddPage(i int) *ProgressUpdate {
	pu.mutation.AddPage(i)
	return pu
}

// SetItemID sets the "item" edge to the Meta entity by ID.
func (pu *ProgressUpdate) SetItemID(id int) *ProgressUpdate {
	pu.mutation.SetItemID(id)
	return pu
}

// SetNillableItemID sets the "item" edge to the Meta entity by ID if the given value is not nil.
func (pu *ProgressUpdate) SetNillableItemID(id *int) *ProgressUpdate {
	if id != nil {
		pu = pu.SetItemID(*id)
	}
	return pu
}

// SetItem sets the "item" edge to the Meta entity.
func (pu *ProgressUpdate) SetItem(m *Meta) *ProgressUpdate {
	return pu.SetItemID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *ProgressUpdate) SetUserID(id int) *ProgressUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *ProgressUpdate) SetNillableUserID(id *int) *ProgressUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProgressUpdate) SetUser(u *User) *ProgressUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the ProgressMutation object of the builder.
func (pu *ProgressUpdate) Mutation() *ProgressMutation {
	return pu.mutation
}

// ClearItem clears the "item" edge to the Meta entity.
func (pu *ProgressUpdate) ClearItem() *ProgressUpdate {
	pu.mutation.ClearItem()
	return pu
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProgressUpdate) ClearUser() *ProgressUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProgressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProgressUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProgressUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(progress.Table, progress.Columns, sqlgraph.NewFieldSpec(progress.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Page(); ok {
		_spec.SetField(progress.FieldPage, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPage(); ok {
		_spec.AddField(progress.FieldPage, field.TypeInt, value)
	}
	if pu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.ItemTable,
			Columns: []string{progress.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.ItemTable,
			Columns: []string{progress.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.UserTable,
			Columns: []string{progress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.UserTable,
			Columns: []string{progress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{progress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProgressUpdateOne is the builder for updating a single Progress entity.
type ProgressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProgressMutation
}

// SetPage sets the "page" field.
func (puo *ProgressUpdateOne) SetPage(i int) *ProgressUpdateOne {
	puo.mutation.ResetPage()
	puo.mutation.SetPage(i)
	return puo
}

// SetNillablePage sets the "page" field if the given value is not nil.
func (puo *ProgressUpdateOne) SetNillablePage(i *int) *ProgressUpdateOne {
	if i != nil {
		puo.SetPage(*i)
	}
	return puo
}

// AddPage adds i to the "page" field.
func (puo *ProgressUpdateOne) AddPage(i int) *ProgressUpdateOne {
	puo.mutation.AddPage(i)
	return puo
}

// SetItemID sets the "item" edge to the Meta entity by ID.
func (puo *ProgressUpdateOne) SetItemID(id int) *ProgressUpdateOne {
	puo.mutation.SetItemID(id)
	return puo
}

// SetNillableItemID sets the "item" edge to the Meta entity by ID if the given value is not nil.
func (puo *ProgressUpdateOne) SetNillableItemID(id *int) *ProgressUpdateOne {
	if id != nil {
		puo = puo.SetItemID(*id)
	}
	return puo
}

// SetItem sets the "item" edge to the Meta entity.
func (puo *ProgressUpdateOne) SetItem(m *Meta) *ProgressUpdateOne {
	return puo.SetItemID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *ProgressUpdateOne) SetUserID(id int) *ProgressUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *ProgressUpdateOne) SetNillableUserID(id *int) *ProgressUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProgressUpdateOne) SetUser(u *User) *ProgressUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the ProgressMutation object of the builder.
func (puo *ProgressUpdateOne) Mutation() *ProgressMutation {
	return puo.mutation
}

// ClearItem clears the "item" edge to the Meta entity.
func (puo *ProgressUpdateOne) ClearItem() *ProgressUpdateOne {
	puo.mutation.ClearItem()
	return puo
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProgressUpdateOne) ClearUser() *ProgressUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the ProgressUpdate builder.
func (puo *ProgressUpdateOne) Where(ps ...predicate.Progress) *ProgressUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProgressUpdateOne) Select(field string, fields ...string) *ProgressUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Progress entity.
func (puo *ProgressUpdateOne) Save(ctx context.Context) (*Progress, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProgressUpdateOne) SaveX(ctx context.Context) *Progress {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProgressUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProgressUpdateOne) sqlSave(ctx context.Context) (_node *Progress, err error) {
	_spec := sqlgraph.NewUpdateSpec(progress.Table, progress.Columns, sqlgraph.NewFieldSpec(progress.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Progress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, progress.FieldID)
		for _, f := range fields {
			if !progress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != progress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Page(); ok {
		_spec.SetField(progress.FieldPage, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPage(); ok {
		_spec.AddField(progress.FieldPage, field.TypeInt, value)
	}
	if puo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.ItemTable,
			Columns: []string{progress.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.ItemTable,
			Columns: []string{progress.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.UserTable,
			Columns: []string{progress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.UserTable,
			Columns: []string{progress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Progress{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{progress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
