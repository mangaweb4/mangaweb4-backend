// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mangaweb4/mangaweb4-backend/ent/predicate"
	"github.com/mangaweb4/mangaweb4-backend/ent/tag"
	"github.com/mangaweb4/mangaweb4-backend/ent/taguser"
	"github.com/mangaweb4/mangaweb4-backend/ent/user"
)

// TagUserUpdate is the builder for updating TagUser entities.
type TagUserUpdate struct {
	config
	hooks    []Hook
	mutation *TagUserMutation
}

// Where appends a list predicates to the TagUserUpdate builder.
func (tuu *TagUserUpdate) Where(ps ...predicate.TagUser) *TagUserUpdate {
	tuu.mutation.Where(ps...)
	return tuu
}

// SetTagID sets the "tag_id" field.
func (tuu *TagUserUpdate) SetTagID(i int) *TagUserUpdate {
	tuu.mutation.SetTagID(i)
	return tuu
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tuu *TagUserUpdate) SetNillableTagID(i *int) *TagUserUpdate {
	if i != nil {
		tuu.SetTagID(*i)
	}
	return tuu
}

// ClearTagID clears the value of the "tag_id" field.
func (tuu *TagUserUpdate) ClearTagID() *TagUserUpdate {
	tuu.mutation.ClearTagID()
	return tuu
}

// SetUserID sets the "user_id" field.
func (tuu *TagUserUpdate) SetUserID(i int) *TagUserUpdate {
	tuu.mutation.SetUserID(i)
	return tuu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuu *TagUserUpdate) SetNillableUserID(i *int) *TagUserUpdate {
	if i != nil {
		tuu.SetUserID(*i)
	}
	return tuu
}

// ClearUserID clears the value of the "user_id" field.
func (tuu *TagUserUpdate) ClearUserID() *TagUserUpdate {
	tuu.mutation.ClearUserID()
	return tuu
}

// SetIsRead sets the "is_read" field.
func (tuu *TagUserUpdate) SetIsRead(b bool) *TagUserUpdate {
	tuu.mutation.SetIsRead(b)
	return tuu
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (tuu *TagUserUpdate) SetNillableIsRead(b *bool) *TagUserUpdate {
	if b != nil {
		tuu.SetIsRead(*b)
	}
	return tuu
}

// SetIsFavorite sets the "is_favorite" field.
func (tuu *TagUserUpdate) SetIsFavorite(b bool) *TagUserUpdate {
	tuu.mutation.SetIsFavorite(b)
	return tuu
}

// SetNillableIsFavorite sets the "is_favorite" field if the given value is not nil.
func (tuu *TagUserUpdate) SetNillableIsFavorite(b *bool) *TagUserUpdate {
	if b != nil {
		tuu.SetIsFavorite(*b)
	}
	return tuu
}

// SetTag sets the "tag" edge to the Tag entity.
func (tuu *TagUserUpdate) SetTag(t *Tag) *TagUserUpdate {
	return tuu.SetTagID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuu *TagUserUpdate) SetUser(u *User) *TagUserUpdate {
	return tuu.SetUserID(u.ID)
}

// Mutation returns the TagUserMutation object of the builder.
func (tuu *TagUserUpdate) Mutation() *TagUserMutation {
	return tuu.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (tuu *TagUserUpdate) ClearTag() *TagUserUpdate {
	tuu.mutation.ClearTag()
	return tuu
}

// ClearUser clears the "user" edge to the User entity.
func (tuu *TagUserUpdate) ClearUser() *TagUserUpdate {
	tuu.mutation.ClearUser()
	return tuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuu *TagUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tuu.sqlSave, tuu.mutation, tuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuu *TagUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuu *TagUserUpdate) Exec(ctx context.Context) error {
	_, err := tuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuu *TagUserUpdate) ExecX(ctx context.Context) {
	if err := tuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuu *TagUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(taguser.Table, taguser.Columns, sqlgraph.NewFieldSpec(taguser.FieldID, field.TypeInt))
	if ps := tuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuu.mutation.IsRead(); ok {
		_spec.SetField(taguser.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := tuu.mutation.IsFavorite(); ok {
		_spec.SetField(taguser.FieldIsFavorite, field.TypeBool, value)
	}
	if tuu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.TagTable,
			Columns: []string{taguser.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.TagTable,
			Columns: []string{taguser.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.UserTable,
			Columns: []string{taguser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.UserTable,
			Columns: []string{taguser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taguser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tuu.mutation.done = true
	return n, nil
}

// TagUserUpdateOne is the builder for updating a single TagUser entity.
type TagUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TagUserMutation
}

// SetTagID sets the "tag_id" field.
func (tuuo *TagUserUpdateOne) SetTagID(i int) *TagUserUpdateOne {
	tuuo.mutation.SetTagID(i)
	return tuuo
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tuuo *TagUserUpdateOne) SetNillableTagID(i *int) *TagUserUpdateOne {
	if i != nil {
		tuuo.SetTagID(*i)
	}
	return tuuo
}

// ClearTagID clears the value of the "tag_id" field.
func (tuuo *TagUserUpdateOne) ClearTagID() *TagUserUpdateOne {
	tuuo.mutation.ClearTagID()
	return tuuo
}

// SetUserID sets the "user_id" field.
func (tuuo *TagUserUpdateOne) SetUserID(i int) *TagUserUpdateOne {
	tuuo.mutation.SetUserID(i)
	return tuuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuuo *TagUserUpdateOne) SetNillableUserID(i *int) *TagUserUpdateOne {
	if i != nil {
		tuuo.SetUserID(*i)
	}
	return tuuo
}

// ClearUserID clears the value of the "user_id" field.
func (tuuo *TagUserUpdateOne) ClearUserID() *TagUserUpdateOne {
	tuuo.mutation.ClearUserID()
	return tuuo
}

// SetIsRead sets the "is_read" field.
func (tuuo *TagUserUpdateOne) SetIsRead(b bool) *TagUserUpdateOne {
	tuuo.mutation.SetIsRead(b)
	return tuuo
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (tuuo *TagUserUpdateOne) SetNillableIsRead(b *bool) *TagUserUpdateOne {
	if b != nil {
		tuuo.SetIsRead(*b)
	}
	return tuuo
}

// SetIsFavorite sets the "is_favorite" field.
func (tuuo *TagUserUpdateOne) SetIsFavorite(b bool) *TagUserUpdateOne {
	tuuo.mutation.SetIsFavorite(b)
	return tuuo
}

// SetNillableIsFavorite sets the "is_favorite" field if the given value is not nil.
func (tuuo *TagUserUpdateOne) SetNillableIsFavorite(b *bool) *TagUserUpdateOne {
	if b != nil {
		tuuo.SetIsFavorite(*b)
	}
	return tuuo
}

// SetTag sets the "tag" edge to the Tag entity.
func (tuuo *TagUserUpdateOne) SetTag(t *Tag) *TagUserUpdateOne {
	return tuuo.SetTagID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuuo *TagUserUpdateOne) SetUser(u *User) *TagUserUpdateOne {
	return tuuo.SetUserID(u.ID)
}

// Mutation returns the TagUserMutation object of the builder.
func (tuuo *TagUserUpdateOne) Mutation() *TagUserMutation {
	return tuuo.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (tuuo *TagUserUpdateOne) ClearTag() *TagUserUpdateOne {
	tuuo.mutation.ClearTag()
	return tuuo
}

// ClearUser clears the "user" edge to the User entity.
func (tuuo *TagUserUpdateOne) ClearUser() *TagUserUpdateOne {
	tuuo.mutation.ClearUser()
	return tuuo
}

// Where appends a list predicates to the TagUserUpdate builder.
func (tuuo *TagUserUpdateOne) Where(ps ...predicate.TagUser) *TagUserUpdateOne {
	tuuo.mutation.Where(ps...)
	return tuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuuo *TagUserUpdateOne) Select(field string, fields ...string) *TagUserUpdateOne {
	tuuo.fields = append([]string{field}, fields...)
	return tuuo
}

// Save executes the query and returns the updated TagUser entity.
func (tuuo *TagUserUpdateOne) Save(ctx context.Context) (*TagUser, error) {
	return withHooks(ctx, tuuo.sqlSave, tuuo.mutation, tuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuuo *TagUserUpdateOne) SaveX(ctx context.Context) *TagUser {
	node, err := tuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuuo *TagUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuuo *TagUserUpdateOne) ExecX(ctx context.Context) {
	if err := tuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuuo *TagUserUpdateOne) sqlSave(ctx context.Context) (_node *TagUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(taguser.Table, taguser.Columns, sqlgraph.NewFieldSpec(taguser.FieldID, field.TypeInt))
	id, ok := tuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TagUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taguser.FieldID)
		for _, f := range fields {
			if !taguser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taguser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuuo.mutation.IsRead(); ok {
		_spec.SetField(taguser.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := tuuo.mutation.IsFavorite(); ok {
		_spec.SetField(taguser.FieldIsFavorite, field.TypeBool, value)
	}
	if tuuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.TagTable,
			Columns: []string{taguser.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.TagTable,
			Columns: []string{taguser.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.UserTable,
			Columns: []string{taguser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taguser.UserTable,
			Columns: []string{taguser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TagUser{config: tuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taguser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuuo.mutation.done = true
	return _node, nil
}
