// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mangaweb4/mangaweb4-backend/ent/tag"
	"github.com/mangaweb4/mangaweb4-backend/ent/taguser"
	"github.com/mangaweb4/mangaweb4-backend/ent/user"
)

// TagUser is the model entity for the TagUser schema.
type TagUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID int `json:"tag_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// IsRead holds the value of the "is_read" field.
	IsRead bool `json:"is_read,omitempty"`
	// IsFavorite holds the value of the "is_favorite" field.
	IsFavorite bool `json:"is_favorite,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagUserQuery when eager-loading is set.
	Edges        TagUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TagUserEdges holds the relations/edges for other nodes in the graph.
type TagUserEdges struct {
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagUserEdges) TagOrErr() (*Tag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagUserEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TagUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taguser.FieldIsRead, taguser.FieldIsFavorite:
			values[i] = new(sql.NullBool)
		case taguser.FieldID, taguser.FieldTagID, taguser.FieldUserID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TagUser fields.
func (tu *TagUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taguser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tu.ID = int(value.Int64)
		case taguser.FieldTagID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				tu.TagID = int(value.Int64)
			}
		case taguser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tu.UserID = int(value.Int64)
			}
		case taguser.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				tu.IsRead = value.Bool
			}
		case taguser.FieldIsFavorite:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_favorite", values[i])
			} else if value.Valid {
				tu.IsFavorite = value.Bool
			}
		default:
			tu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TagUser.
// This includes values selected through modifiers, order, etc.
func (tu *TagUser) Value(name string) (ent.Value, error) {
	return tu.selectValues.Get(name)
}

// QueryTag queries the "tag" edge of the TagUser entity.
func (tu *TagUser) QueryTag() *TagQuery {
	return NewTagUserClient(tu.config).QueryTag(tu)
}

// QueryUser queries the "user" edge of the TagUser entity.
func (tu *TagUser) QueryUser() *UserQuery {
	return NewTagUserClient(tu.config).QueryUser(tu)
}

// Update returns a builder for updating this TagUser.
// Note that you need to call TagUser.Unwrap() before calling this method if this TagUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (tu *TagUser) Update() *TagUserUpdateOne {
	return NewTagUserClient(tu.config).UpdateOne(tu)
}

// Unwrap unwraps the TagUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tu *TagUser) Unwrap() *TagUser {
	_tx, ok := tu.config.driver.(*txDriver)
	if !ok {
		panic("ent: TagUser is not a transactional entity")
	}
	tu.config.driver = _tx.drv
	return tu
}

// String implements the fmt.Stringer.
func (tu *TagUser) String() string {
	var builder strings.Builder
	builder.WriteString("TagUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tu.ID))
	builder.WriteString("tag_id=")
	builder.WriteString(fmt.Sprintf("%v", tu.TagID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", tu.UserID))
	builder.WriteString(", ")
	builder.WriteString("is_read=")
	builder.WriteString(fmt.Sprintf("%v", tu.IsRead))
	builder.WriteString(", ")
	builder.WriteString("is_favorite=")
	builder.WriteString(fmt.Sprintf("%v", tu.IsFavorite))
	builder.WriteByte(')')
	return builder.String()
}

// TagUsers is a parsable slice of TagUser.
type TagUsers []*TagUser
