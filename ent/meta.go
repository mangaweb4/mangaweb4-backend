// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mangaweb4/mangaweb4-backend/ent/meta"
)

// Meta is the model entity for the Meta schema.
type Meta struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Favorite holds the value of the "favorite" field.
	Favorite bool `json:"favorite,omitempty"`
	// FileIndices holds the value of the "file_indices" field.
	FileIndices []int `json:"file_indices,omitempty"`
	// Read holds the value of the "read" field.
	Read bool `json:"read,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Hidden holds the value of the "hidden" field.
	Hidden bool `json:"hidden,omitempty"`
	// ContainerType holds the value of the "container_type" field.
	ContainerType meta.ContainerType `json:"container_type,omitempty"`
	// ThumbnailIndex holds the value of the "thumbnail_index" field.
	ThumbnailIndex int `json:"thumbnail_index,omitempty"`
	// ThumbnailX holds the value of the "thumbnail_x" field.
	ThumbnailX int `json:"thumbnail_x,omitempty"`
	// ThumbnailY holds the value of the "thumbnail_y" field.
	ThumbnailY int `json:"thumbnail_y,omitempty"`
	// ThumbnailWidth holds the value of the "thumbnail_width" field.
	ThumbnailWidth int `json:"thumbnail_width,omitempty"`
	// ThumbnailHeight holds the value of the "thumbnail_height" field.
	ThumbnailHeight int `json:"thumbnail_height,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetaQuery when eager-loading is set.
	Edges        MetaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MetaEdges holds the relations/edges for other nodes in the graph.
type MetaEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Histories holds the value of the histories edge.
	Histories []*History `json:"histories,omitempty"`
	// FavoriteOfUser holds the value of the favorite_of_user edge.
	FavoriteOfUser []*User `json:"favorite_of_user,omitempty"`
	// Progress holds the value of the progress edge.
	Progress []*Progress `json:"progress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e MetaEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// HistoriesOrErr returns the Histories value or an error if the edge
// was not loaded in eager-loading.
func (e MetaEdges) HistoriesOrErr() ([]*History, error) {
	if e.loadedTypes[1] {
		return e.Histories, nil
	}
	return nil, &NotLoadedError{edge: "histories"}
}

// FavoriteOfUserOrErr returns the FavoriteOfUser value or an error if the edge
// was not loaded in eager-loading.
func (e MetaEdges) FavoriteOfUserOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.FavoriteOfUser, nil
	}
	return nil, &NotLoadedError{edge: "favorite_of_user"}
}

// ProgressOrErr returns the Progress value or an error if the edge
// was not loaded in eager-loading.
func (e MetaEdges) ProgressOrErr() ([]*Progress, error) {
	if e.loadedTypes[3] {
		return e.Progress, nil
	}
	return nil, &NotLoadedError{edge: "progress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Meta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meta.FieldFileIndices:
			values[i] = new([]byte)
		case meta.FieldFavorite, meta.FieldRead, meta.FieldActive, meta.FieldHidden:
			values[i] = new(sql.NullBool)
		case meta.FieldID, meta.FieldThumbnailIndex, meta.FieldThumbnailX, meta.FieldThumbnailY, meta.FieldThumbnailWidth, meta.FieldThumbnailHeight:
			values[i] = new(sql.NullInt64)
		case meta.FieldName, meta.FieldContainerType:
			values[i] = new(sql.NullString)
		case meta.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Meta fields.
func (m *Meta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case meta.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case meta.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case meta.FieldFavorite:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field favorite", values[i])
			} else if value.Valid {
				m.Favorite = value.Bool
			}
		case meta.FieldFileIndices:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field file_indices", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.FileIndices); err != nil {
					return fmt.Errorf("unmarshal field file_indices: %w", err)
				}
			}
		case meta.FieldRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field read", values[i])
			} else if value.Valid {
				m.Read = value.Bool
			}
		case meta.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				m.Active = value.Bool
			}
		case meta.FieldHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hidden", values[i])
			} else if value.Valid {
				m.Hidden = value.Bool
			}
		case meta.FieldContainerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field container_type", values[i])
			} else if value.Valid {
				m.ContainerType = meta.ContainerType(value.String)
			}
		case meta.FieldThumbnailIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_index", values[i])
			} else if value.Valid {
				m.ThumbnailIndex = int(value.Int64)
			}
		case meta.FieldThumbnailX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_x", values[i])
			} else if value.Valid {
				m.ThumbnailX = int(value.Int64)
			}
		case meta.FieldThumbnailY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_y", values[i])
			} else if value.Valid {
				m.ThumbnailY = int(value.Int64)
			}
		case meta.FieldThumbnailWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_width", values[i])
			} else if value.Valid {
				m.ThumbnailWidth = int(value.Int64)
			}
		case meta.FieldThumbnailHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_height", values[i])
			} else if value.Valid {
				m.ThumbnailHeight = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Meta.
// This includes values selected through modifiers, order, etc.
func (m *Meta) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Meta entity.
func (m *Meta) QueryTags() *TagQuery {
	return NewMetaClient(m.config).QueryTags(m)
}

// QueryHistories queries the "histories" edge of the Meta entity.
func (m *Meta) QueryHistories() *HistoryQuery {
	return NewMetaClient(m.config).QueryHistories(m)
}

// QueryFavoriteOfUser queries the "favorite_of_user" edge of the Meta entity.
func (m *Meta) QueryFavoriteOfUser() *UserQuery {
	return NewMetaClient(m.config).QueryFavoriteOfUser(m)
}

// QueryProgress queries the "progress" edge of the Meta entity.
func (m *Meta) QueryProgress() *ProgressQuery {
	return NewMetaClient(m.config).QueryProgress(m)
}

// Update returns a builder for updating this Meta.
// Note that you need to call Meta.Unwrap() before calling this method if this Meta
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Meta) Update() *MetaUpdateOne {
	return NewMetaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Meta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Meta) Unwrap() *Meta {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Meta is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Meta) String() string {
	var builder strings.Builder
	builder.WriteString("Meta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("favorite=")
	builder.WriteString(fmt.Sprintf("%v", m.Favorite))
	builder.WriteString(", ")
	builder.WriteString("file_indices=")
	builder.WriteString(fmt.Sprintf("%v", m.FileIndices))
	builder.WriteString(", ")
	builder.WriteString("read=")
	builder.WriteString(fmt.Sprintf("%v", m.Read))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", m.Active))
	builder.WriteString(", ")
	builder.WriteString("hidden=")
	builder.WriteString(fmt.Sprintf("%v", m.Hidden))
	builder.WriteString(", ")
	builder.WriteString("container_type=")
	builder.WriteString(fmt.Sprintf("%v", m.ContainerType))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_index=")
	builder.WriteString(fmt.Sprintf("%v", m.ThumbnailIndex))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_x=")
	builder.WriteString(fmt.Sprintf("%v", m.ThumbnailX))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_y=")
	builder.WriteString(fmt.Sprintf("%v", m.ThumbnailY))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_width=")
	builder.WriteString(fmt.Sprintf("%v", m.ThumbnailWidth))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_height=")
	builder.WriteString(fmt.Sprintf("%v", m.ThumbnailHeight))
	builder.WriteByte(')')
	return builder.String()
}

// MetaSlice is a parsable slice of Meta.
type MetaSlice []*Meta
