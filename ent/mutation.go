// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wutipong/mangaweb3-backend/ent/history"
	"github.com/wutipong/mangaweb3-backend/ent/meta"
	"github.com/wutipong/mangaweb3-backend/ent/predicate"
	"github.com/wutipong/mangaweb3-backend/ent/tag"
	"github.com/wutipong/mangaweb3-backend/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHistory = "History"
	TypeMeta    = "Meta"
	TypeTag     = "Tag"
	TypeUser    = "User"
)

// HistoryMutation represents an operation that mutates the History nodes in the graph.
type HistoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	clearedFields map[string]struct{}
	item          *int
	cleareditem   bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*History, error)
	predicates    []predicate.History
}

var _ ent.Mutation = (*HistoryMutation)(nil)

// historyOption allows management of the mutation configuration using functional options.
type historyOption func(*HistoryMutation)

// newHistoryMutation creates new mutation for the History entity.
func newHistoryMutation(c config, op Op, opts ...historyOption) *HistoryMutation {
	m := &HistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistoryID sets the ID field of the mutation.
func withHistoryID(id int) historyOption {
	return func(m *HistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *History
		)
		m.oldValue = func(ctx context.Context) (*History, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().History.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistory sets the old History of the mutation.
func withHistory(node *History) historyOption {
	return func(m *HistoryMutation) {
		m.oldValue = func(context.Context) (*History, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().History.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *HistoryMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *HistoryMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *HistoryMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetItemID sets the "item" edge to the Meta entity by id.
func (m *HistoryMutation) SetItemID(id int) {
	m.item = &id
}

// ClearItem clears the "item" edge to the Meta entity.
func (m *HistoryMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Meta entity was cleared.
func (m *HistoryMutation) ItemCleared() bool {
	return m.cleareditem
}

// ItemID returns the "item" edge ID in the mutation.
func (m *HistoryMutation) ItemID() (id int, exists bool) {
	if m.item != nil {
		return *m.item, true
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemID instead. It exists only for internal usage by the builders.
func (m *HistoryMutation) ItemIDs() (ids []int) {
	if id := m.item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *HistoryMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *HistoryMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *HistoryMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *HistoryMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *HistoryMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *HistoryMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *HistoryMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the HistoryMutation builder.
func (m *HistoryMutation) Where(ps ...predicate.History) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.History, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (History).
func (m *HistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.create_time != nil {
		fields = append(fields, history.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case history.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case history.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown History field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case history.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown History numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown History nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistoryMutation) ResetField(name string) error {
	switch name {
	case history.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.item != nil {
		edges = append(edges, history.EdgeItem)
	}
	if m.user != nil {
		edges = append(edges, history.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case history.EdgeItem:
		if id := m.item; id != nil {
			return []ent.Value{*id}
		}
	case history.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareditem {
		edges = append(edges, history.EdgeItem)
	}
	if m.cleareduser {
		edges = append(edges, history.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case history.EdgeItem:
		return m.cleareditem
	case history.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistoryMutation) ClearEdge(name string) error {
	switch name {
	case history.EdgeItem:
		m.ClearItem()
		return nil
	case history.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown History unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistoryMutation) ResetEdge(name string) error {
	switch name {
	case history.EdgeItem:
		m.ResetItem()
		return nil
	case history.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown History edge %s", name)
}

// MetaMutation represents an operation that mutates the Meta nodes in the graph.
type MetaMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	create_time             *time.Time
	favorite                *bool
	file_indices            *[]int
	appendfile_indices      []int
	read                    *bool
	active                  *bool
	hidden                  *bool
	container_type          *meta.ContainerType
	thumbnail_index         *int
	addthumbnail_index      *int
	thumbnail_x             *int
	addthumbnail_x          *int
	thumbnail_y             *int
	addthumbnail_y          *int
	thumbnail_width         *int
	addthumbnail_width      *int
	thumbnail_height        *int
	addthumbnail_height     *int
	clearedFields           map[string]struct{}
	tags                    map[int]struct{}
	removedtags             map[int]struct{}
	clearedtags             bool
	histories               map[int]struct{}
	removedhistories        map[int]struct{}
	clearedhistories        bool
	favorite_of_user        map[int]struct{}
	removedfavorite_of_user map[int]struct{}
	clearedfavorite_of_user bool
	done                    bool
	oldValue                func(context.Context) (*Meta, error)
	predicates              []predicate.Meta
}

var _ ent.Mutation = (*MetaMutation)(nil)

// metaOption allows management of the mutation configuration using functional options.
type metaOption func(*MetaMutation)

// newMetaMutation creates new mutation for the Meta entity.
func newMetaMutation(c config, op Op, opts ...metaOption) *MetaMutation {
	m := &MetaMutation{
		config:        c,
		op:            op,
		typ:           TypeMeta,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMetaID sets the ID field of the mutation.
func withMetaID(id int) metaOption {
	return func(m *MetaMutation) {
		var (
			err   error
			once  sync.Once
			value *Meta
		)
		m.oldValue = func(ctx context.Context) (*Meta, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Meta.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeta sets the old Meta of the mutation.
func withMeta(node *Meta) metaOption {
	return func(m *MetaMutation) {
		m.oldValue = func(context.Context) (*Meta, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MetaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MetaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MetaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MetaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Meta.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MetaMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MetaMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MetaMutation) ResetName() {
	m.name = nil
}

// SetCreateTime sets the "create_time" field.
func (m *MetaMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MetaMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MetaMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetFavorite sets the "favorite" field.
func (m *MetaMutation) SetFavorite(b bool) {
	m.favorite = &b
}

// Favorite returns the value of the "favorite" field in the mutation.
func (m *MetaMutation) Favorite() (r bool, exists bool) {
	v := m.favorite
	if v == nil {
		return
	}
	return *v, true
}

// OldFavorite returns the old "favorite" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldFavorite(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFavorite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFavorite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFavorite: %w", err)
	}
	return oldValue.Favorite, nil
}

// ResetFavorite resets all changes to the "favorite" field.
func (m *MetaMutation) ResetFavorite() {
	m.favorite = nil
}

// SetFileIndices sets the "file_indices" field.
func (m *MetaMutation) SetFileIndices(i []int) {
	m.file_indices = &i
	m.appendfile_indices = nil
}

// FileIndices returns the value of the "file_indices" field in the mutation.
func (m *MetaMutation) FileIndices() (r []int, exists bool) {
	v := m.file_indices
	if v == nil {
		return
	}
	return *v, true
}

// OldFileIndices returns the old "file_indices" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldFileIndices(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileIndices is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileIndices requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileIndices: %w", err)
	}
	return oldValue.FileIndices, nil
}

// AppendFileIndices adds i to the "file_indices" field.
func (m *MetaMutation) AppendFileIndices(i []int) {
	m.appendfile_indices = append(m.appendfile_indices, i...)
}

// AppendedFileIndices returns the list of values that were appended to the "file_indices" field in this mutation.
func (m *MetaMutation) AppendedFileIndices() ([]int, bool) {
	if len(m.appendfile_indices) == 0 {
		return nil, false
	}
	return m.appendfile_indices, true
}

// ResetFileIndices resets all changes to the "file_indices" field.
func (m *MetaMutation) ResetFileIndices() {
	m.file_indices = nil
	m.appendfile_indices = nil
}

// SetRead sets the "read" field.
func (m *MetaMutation) SetRead(b bool) {
	m.read = &b
}

// Read returns the value of the "read" field in the mutation.
func (m *MetaMutation) Read() (r bool, exists bool) {
	v := m.read
	if v == nil {
		return
	}
	return *v, true
}

// OldRead returns the old "read" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRead: %w", err)
	}
	return oldValue.Read, nil
}

// ResetRead resets all changes to the "read" field.
func (m *MetaMutation) ResetRead() {
	m.read = nil
}

// SetActive sets the "active" field.
func (m *MetaMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *MetaMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *MetaMutation) ResetActive() {
	m.active = nil
}

// SetHidden sets the "hidden" field.
func (m *MetaMutation) SetHidden(b bool) {
	m.hidden = &b
}

// Hidden returns the value of the "hidden" field in the mutation.
func (m *MetaMutation) Hidden() (r bool, exists bool) {
	v := m.hidden
	if v == nil {
		return
	}
	return *v, true
}

// OldHidden returns the old "hidden" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldHidden(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHidden is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHidden requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHidden: %w", err)
	}
	return oldValue.Hidden, nil
}

// ResetHidden resets all changes to the "hidden" field.
func (m *MetaMutation) ResetHidden() {
	m.hidden = nil
}

// SetContainerType sets the "container_type" field.
func (m *MetaMutation) SetContainerType(mt meta.ContainerType) {
	m.container_type = &mt
}

// ContainerType returns the value of the "container_type" field in the mutation.
func (m *MetaMutation) ContainerType() (r meta.ContainerType, exists bool) {
	v := m.container_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContainerType returns the old "container_type" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldContainerType(ctx context.Context) (v meta.ContainerType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContainerType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContainerType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContainerType: %w", err)
	}
	return oldValue.ContainerType, nil
}

// ResetContainerType resets all changes to the "container_type" field.
func (m *MetaMutation) ResetContainerType() {
	m.container_type = nil
}

// SetThumbnailIndex sets the "thumbnail_index" field.
func (m *MetaMutation) SetThumbnailIndex(i int) {
	m.thumbnail_index = &i
	m.addthumbnail_index = nil
}

// ThumbnailIndex returns the value of the "thumbnail_index" field in the mutation.
func (m *MetaMutation) ThumbnailIndex() (r int, exists bool) {
	v := m.thumbnail_index
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailIndex returns the old "thumbnail_index" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldThumbnailIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailIndex: %w", err)
	}
	return oldValue.ThumbnailIndex, nil
}

// AddThumbnailIndex adds i to the "thumbnail_index" field.
func (m *MetaMutation) AddThumbnailIndex(i int) {
	if m.addthumbnail_index != nil {
		*m.addthumbnail_index += i
	} else {
		m.addthumbnail_index = &i
	}
}

// AddedThumbnailIndex returns the value that was added to the "thumbnail_index" field in this mutation.
func (m *MetaMutation) AddedThumbnailIndex() (r int, exists bool) {
	v := m.addthumbnail_index
	if v == nil {
		return
	}
	return *v, true
}

// ClearThumbnailIndex clears the value of the "thumbnail_index" field.
func (m *MetaMutation) ClearThumbnailIndex() {
	m.thumbnail_index = nil
	m.addthumbnail_index = nil
	m.clearedFields[meta.FieldThumbnailIndex] = struct{}{}
}

// ThumbnailIndexCleared returns if the "thumbnail_index" field was cleared in this mutation.
func (m *MetaMutation) ThumbnailIndexCleared() bool {
	_, ok := m.clearedFields[meta.FieldThumbnailIndex]
	return ok
}

// ResetThumbnailIndex resets all changes to the "thumbnail_index" field.
func (m *MetaMutation) ResetThumbnailIndex() {
	m.thumbnail_index = nil
	m.addthumbnail_index = nil
	delete(m.clearedFields, meta.FieldThumbnailIndex)
}

// SetThumbnailX sets the "thumbnail_x" field.
func (m *MetaMutation) SetThumbnailX(i int) {
	m.thumbnail_x = &i
	m.addthumbnail_x = nil
}

// ThumbnailX returns the value of the "thumbnail_x" field in the mutation.
func (m *MetaMutation) ThumbnailX() (r int, exists bool) {
	v := m.thumbnail_x
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailX returns the old "thumbnail_x" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldThumbnailX(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailX is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailX requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailX: %w", err)
	}
	return oldValue.ThumbnailX, nil
}

// AddThumbnailX adds i to the "thumbnail_x" field.
func (m *MetaMutation) AddThumbnailX(i int) {
	if m.addthumbnail_x != nil {
		*m.addthumbnail_x += i
	} else {
		m.addthumbnail_x = &i
	}
}

// AddedThumbnailX returns the value that was added to the "thumbnail_x" field in this mutation.
func (m *MetaMutation) AddedThumbnailX() (r int, exists bool) {
	v := m.addthumbnail_x
	if v == nil {
		return
	}
	return *v, true
}

// ClearThumbnailX clears the value of the "thumbnail_x" field.
func (m *MetaMutation) ClearThumbnailX() {
	m.thumbnail_x = nil
	m.addthumbnail_x = nil
	m.clearedFields[meta.FieldThumbnailX] = struct{}{}
}

// ThumbnailXCleared returns if the "thumbnail_x" field was cleared in this mutation.
func (m *MetaMutation) ThumbnailXCleared() bool {
	_, ok := m.clearedFields[meta.FieldThumbnailX]
	return ok
}

// ResetThumbnailX resets all changes to the "thumbnail_x" field.
func (m *MetaMutation) ResetThumbnailX() {
	m.thumbnail_x = nil
	m.addthumbnail_x = nil
	delete(m.clearedFields, meta.FieldThumbnailX)
}

// SetThumbnailY sets the "thumbnail_y" field.
func (m *MetaMutation) SetThumbnailY(i int) {
	m.thumbnail_y = &i
	m.addthumbnail_y = nil
}

// ThumbnailY returns the value of the "thumbnail_y" field in the mutation.
func (m *MetaMutation) ThumbnailY() (r int, exists bool) {
	v := m.thumbnail_y
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailY returns the old "thumbnail_y" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldThumbnailY(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailY is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailY requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailY: %w", err)
	}
	return oldValue.ThumbnailY, nil
}

// AddThumbnailY adds i to the "thumbnail_y" field.
func (m *MetaMutation) AddThumbnailY(i int) {
	if m.addthumbnail_y != nil {
		*m.addthumbnail_y += i
	} else {
		m.addthumbnail_y = &i
	}
}

// AddedThumbnailY returns the value that was added to the "thumbnail_y" field in this mutation.
func (m *MetaMutation) AddedThumbnailY() (r int, exists bool) {
	v := m.addthumbnail_y
	if v == nil {
		return
	}
	return *v, true
}

// ClearThumbnailY clears the value of the "thumbnail_y" field.
func (m *MetaMutation) ClearThumbnailY() {
	m.thumbnail_y = nil
	m.addthumbnail_y = nil
	m.clearedFields[meta.FieldThumbnailY] = struct{}{}
}

// ThumbnailYCleared returns if the "thumbnail_y" field was cleared in this mutation.
func (m *MetaMutation) ThumbnailYCleared() bool {
	_, ok := m.clearedFields[meta.FieldThumbnailY]
	return ok
}

// ResetThumbnailY resets all changes to the "thumbnail_y" field.
func (m *MetaMutation) ResetThumbnailY() {
	m.thumbnail_y = nil
	m.addthumbnail_y = nil
	delete(m.clearedFields, meta.FieldThumbnailY)
}

// SetThumbnailWidth sets the "thumbnail_width" field.
func (m *MetaMutation) SetThumbnailWidth(i int) {
	m.thumbnail_width = &i
	m.addthumbnail_width = nil
}

// ThumbnailWidth returns the value of the "thumbnail_width" field in the mutation.
func (m *MetaMutation) ThumbnailWidth() (r int, exists bool) {
	v := m.thumbnail_width
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailWidth returns the old "thumbnail_width" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldThumbnailWidth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailWidth: %w", err)
	}
	return oldValue.ThumbnailWidth, nil
}

// AddThumbnailWidth adds i to the "thumbnail_width" field.
func (m *MetaMutation) AddThumbnailWidth(i int) {
	if m.addthumbnail_width != nil {
		*m.addthumbnail_width += i
	} else {
		m.addthumbnail_width = &i
	}
}

// AddedThumbnailWidth returns the value that was added to the "thumbnail_width" field in this mutation.
func (m *MetaMutation) AddedThumbnailWidth() (r int, exists bool) {
	v := m.addthumbnail_width
	if v == nil {
		return
	}
	return *v, true
}

// ClearThumbnailWidth clears the value of the "thumbnail_width" field.
func (m *MetaMutation) ClearThumbnailWidth() {
	m.thumbnail_width = nil
	m.addthumbnail_width = nil
	m.clearedFields[meta.FieldThumbnailWidth] = struct{}{}
}

// ThumbnailWidthCleared returns if the "thumbnail_width" field was cleared in this mutation.
func (m *MetaMutation) ThumbnailWidthCleared() bool {
	_, ok := m.clearedFields[meta.FieldThumbnailWidth]
	return ok
}

// ResetThumbnailWidth resets all changes to the "thumbnail_width" field.
func (m *MetaMutation) ResetThumbnailWidth() {
	m.thumbnail_width = nil
	m.addthumbnail_width = nil
	delete(m.clearedFields, meta.FieldThumbnailWidth)
}

// SetThumbnailHeight sets the "thumbnail_height" field.
func (m *MetaMutation) SetThumbnailHeight(i int) {
	m.thumbnail_height = &i
	m.addthumbnail_height = nil
}

// ThumbnailHeight returns the value of the "thumbnail_height" field in the mutation.
func (m *MetaMutation) ThumbnailHeight() (r int, exists bool) {
	v := m.thumbnail_height
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailHeight returns the old "thumbnail_height" field's value of the Meta entity.
// If the Meta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetaMutation) OldThumbnailHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailHeight: %w", err)
	}
	return oldValue.ThumbnailHeight, nil
}

// AddThumbnailHeight adds i to the "thumbnail_height" field.
func (m *MetaMutation) AddThumbnailHeight(i int) {
	if m.addthumbnail_height != nil {
		*m.addthumbnail_height += i
	} else {
		m.addthumbnail_height = &i
	}
}

// AddedThumbnailHeight returns the value that was added to the "thumbnail_height" field in this mutation.
func (m *MetaMutation) AddedThumbnailHeight() (r int, exists bool) {
	v := m.addthumbnail_height
	if v == nil {
		return
	}
	return *v, true
}

// ClearThumbnailHeight clears the value of the "thumbnail_height" field.
func (m *MetaMutation) ClearThumbnailHeight() {
	m.thumbnail_height = nil
	m.addthumbnail_height = nil
	m.clearedFields[meta.FieldThumbnailHeight] = struct{}{}
}

// ThumbnailHeightCleared returns if the "thumbnail_height" field was cleared in this mutation.
func (m *MetaMutation) ThumbnailHeightCleared() bool {
	_, ok := m.clearedFields[meta.FieldThumbnailHeight]
	return ok
}

// ResetThumbnailHeight resets all changes to the "thumbnail_height" field.
func (m *MetaMutation) ResetThumbnailHeight() {
	m.thumbnail_height = nil
	m.addthumbnail_height = nil
	delete(m.clearedFields, meta.FieldThumbnailHeight)
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *MetaMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *MetaMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *MetaMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *MetaMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *MetaMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *MetaMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *MetaMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddHistoryIDs adds the "histories" edge to the History entity by ids.
func (m *MetaMutation) AddHistoryIDs(ids ...int) {
	if m.histories == nil {
		m.histories = make(map[int]struct{})
	}
	for i := range ids {
		m.histories[ids[i]] = struct{}{}
	}
}

// ClearHistories clears the "histories" edge to the History entity.
func (m *MetaMutation) ClearHistories() {
	m.clearedhistories = true
}

// HistoriesCleared reports if the "histories" edge to the History entity was cleared.
func (m *MetaMutation) HistoriesCleared() bool {
	return m.clearedhistories
}

// RemoveHistoryIDs removes the "histories" edge to the History entity by IDs.
func (m *MetaMutation) RemoveHistoryIDs(ids ...int) {
	if m.removedhistories == nil {
		m.removedhistories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.histories, ids[i])
		m.removedhistories[ids[i]] = struct{}{}
	}
}

// RemovedHistories returns the removed IDs of the "histories" edge to the History entity.
func (m *MetaMutation) RemovedHistoriesIDs() (ids []int) {
	for id := range m.removedhistories {
		ids = append(ids, id)
	}
	return
}

// HistoriesIDs returns the "histories" edge IDs in the mutation.
func (m *MetaMutation) HistoriesIDs() (ids []int) {
	for id := range m.histories {
		ids = append(ids, id)
	}
	return
}

// ResetHistories resets all changes to the "histories" edge.
func (m *MetaMutation) ResetHistories() {
	m.histories = nil
	m.clearedhistories = false
	m.removedhistories = nil
}

// AddFavoriteOfUserIDs adds the "favorite_of_user" edge to the User entity by ids.
func (m *MetaMutation) AddFavoriteOfUserIDs(ids ...int) {
	if m.favorite_of_user == nil {
		m.favorite_of_user = make(map[int]struct{})
	}
	for i := range ids {
		m.favorite_of_user[ids[i]] = struct{}{}
	}
}

// ClearFavoriteOfUser clears the "favorite_of_user" edge to the User entity.
func (m *MetaMutation) ClearFavoriteOfUser() {
	m.clearedfavorite_of_user = true
}

// FavoriteOfUserCleared reports if the "favorite_of_user" edge to the User entity was cleared.
func (m *MetaMutation) FavoriteOfUserCleared() bool {
	return m.clearedfavorite_of_user
}

// RemoveFavoriteOfUserIDs removes the "favorite_of_user" edge to the User entity by IDs.
func (m *MetaMutation) RemoveFavoriteOfUserIDs(ids ...int) {
	if m.removedfavorite_of_user == nil {
		m.removedfavorite_of_user = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.favorite_of_user, ids[i])
		m.removedfavorite_of_user[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteOfUser returns the removed IDs of the "favorite_of_user" edge to the User entity.
func (m *MetaMutation) RemovedFavoriteOfUserIDs() (ids []int) {
	for id := range m.removedfavorite_of_user {
		ids = append(ids, id)
	}
	return
}

// FavoriteOfUserIDs returns the "favorite_of_user" edge IDs in the mutation.
func (m *MetaMutation) FavoriteOfUserIDs() (ids []int) {
	for id := range m.favorite_of_user {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteOfUser resets all changes to the "favorite_of_user" edge.
func (m *MetaMutation) ResetFavoriteOfUser() {
	m.favorite_of_user = nil
	m.clearedfavorite_of_user = false
	m.removedfavorite_of_user = nil
}

// Where appends a list predicates to the MetaMutation builder.
func (m *MetaMutation) Where(ps ...predicate.Meta) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MetaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MetaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Meta, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MetaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MetaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Meta).
func (m *MetaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MetaMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, meta.FieldName)
	}
	if m.create_time != nil {
		fields = append(fields, meta.FieldCreateTime)
	}
	if m.favorite != nil {
		fields = append(fields, meta.FieldFavorite)
	}
	if m.file_indices != nil {
		fields = append(fields, meta.FieldFileIndices)
	}
	if m.read != nil {
		fields = append(fields, meta.FieldRead)
	}
	if m.active != nil {
		fields = append(fields, meta.FieldActive)
	}
	if m.hidden != nil {
		fields = append(fields, meta.FieldHidden)
	}
	if m.container_type != nil {
		fields = append(fields, meta.FieldContainerType)
	}
	if m.thumbnail_index != nil {
		fields = append(fields, meta.FieldThumbnailIndex)
	}
	if m.thumbnail_x != nil {
		fields = append(fields, meta.FieldThumbnailX)
	}
	if m.thumbnail_y != nil {
		fields = append(fields, meta.FieldThumbnailY)
	}
	if m.thumbnail_width != nil {
		fields = append(fields, meta.FieldThumbnailWidth)
	}
	if m.thumbnail_height != nil {
		fields = append(fields, meta.FieldThumbnailHeight)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MetaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case meta.FieldName:
		return m.Name()
	case meta.FieldCreateTime:
		return m.CreateTime()
	case meta.FieldFavorite:
		return m.Favorite()
	case meta.FieldFileIndices:
		return m.FileIndices()
	case meta.FieldRead:
		return m.Read()
	case meta.FieldActive:
		return m.Active()
	case meta.FieldHidden:
		return m.Hidden()
	case meta.FieldContainerType:
		return m.ContainerType()
	case meta.FieldThumbnailIndex:
		return m.ThumbnailIndex()
	case meta.FieldThumbnailX:
		return m.ThumbnailX()
	case meta.FieldThumbnailY:
		return m.ThumbnailY()
	case meta.FieldThumbnailWidth:
		return m.ThumbnailWidth()
	case meta.FieldThumbnailHeight:
		return m.ThumbnailHeight()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MetaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case meta.FieldName:
		return m.OldName(ctx)
	case meta.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case meta.FieldFavorite:
		return m.OldFavorite(ctx)
	case meta.FieldFileIndices:
		return m.OldFileIndices(ctx)
	case meta.FieldRead:
		return m.OldRead(ctx)
	case meta.FieldActive:
		return m.OldActive(ctx)
	case meta.FieldHidden:
		return m.OldHidden(ctx)
	case meta.FieldContainerType:
		return m.OldContainerType(ctx)
	case meta.FieldThumbnailIndex:
		return m.OldThumbnailIndex(ctx)
	case meta.FieldThumbnailX:
		return m.OldThumbnailX(ctx)
	case meta.FieldThumbnailY:
		return m.OldThumbnailY(ctx)
	case meta.FieldThumbnailWidth:
		return m.OldThumbnailWidth(ctx)
	case meta.FieldThumbnailHeight:
		return m.OldThumbnailHeight(ctx)
	}
	return nil, fmt.Errorf("unknown Meta field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case meta.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case meta.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case meta.FieldFavorite:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFavorite(v)
		return nil
	case meta.FieldFileIndices:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileIndices(v)
		return nil
	case meta.FieldRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRead(v)
		return nil
	case meta.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case meta.FieldHidden:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHidden(v)
		return nil
	case meta.FieldContainerType:
		v, ok := value.(meta.ContainerType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContainerType(v)
		return nil
	case meta.FieldThumbnailIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailIndex(v)
		return nil
	case meta.FieldThumbnailX:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailX(v)
		return nil
	case meta.FieldThumbnailY:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailY(v)
		return nil
	case meta.FieldThumbnailWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailWidth(v)
		return nil
	case meta.FieldThumbnailHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Meta field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MetaMutation) AddedFields() []string {
	var fields []string
	if m.addthumbnail_index != nil {
		fields = append(fields, meta.FieldThumbnailIndex)
	}
	if m.addthumbnail_x != nil {
		fields = append(fields, meta.FieldThumbnailX)
	}
	if m.addthumbnail_y != nil {
		fields = append(fields, meta.FieldThumbnailY)
	}
	if m.addthumbnail_width != nil {
		fields = append(fields, meta.FieldThumbnailWidth)
	}
	if m.addthumbnail_height != nil {
		fields = append(fields, meta.FieldThumbnailHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MetaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case meta.FieldThumbnailIndex:
		return m.AddedThumbnailIndex()
	case meta.FieldThumbnailX:
		return m.AddedThumbnailX()
	case meta.FieldThumbnailY:
		return m.AddedThumbnailY()
	case meta.FieldThumbnailWidth:
		return m.AddedThumbnailWidth()
	case meta.FieldThumbnailHeight:
		return m.AddedThumbnailHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case meta.FieldThumbnailIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThumbnailIndex(v)
		return nil
	case meta.FieldThumbnailX:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThumbnailX(v)
		return nil
	case meta.FieldThumbnailY:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThumbnailY(v)
		return nil
	case meta.FieldThumbnailWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThumbnailWidth(v)
		return nil
	case meta.FieldThumbnailHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThumbnailHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Meta numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MetaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(meta.FieldThumbnailIndex) {
		fields = append(fields, meta.FieldThumbnailIndex)
	}
	if m.FieldCleared(meta.FieldThumbnailX) {
		fields = append(fields, meta.FieldThumbnailX)
	}
	if m.FieldCleared(meta.FieldThumbnailY) {
		fields = append(fields, meta.FieldThumbnailY)
	}
	if m.FieldCleared(meta.FieldThumbnailWidth) {
		fields = append(fields, meta.FieldThumbnailWidth)
	}
	if m.FieldCleared(meta.FieldThumbnailHeight) {
		fields = append(fields, meta.FieldThumbnailHeight)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MetaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MetaMutation) ClearField(name string) error {
	switch name {
	case meta.FieldThumbnailIndex:
		m.ClearThumbnailIndex()
		return nil
	case meta.FieldThumbnailX:
		m.ClearThumbnailX()
		return nil
	case meta.FieldThumbnailY:
		m.ClearThumbnailY()
		return nil
	case meta.FieldThumbnailWidth:
		m.ClearThumbnailWidth()
		return nil
	case meta.FieldThumbnailHeight:
		m.ClearThumbnailHeight()
		return nil
	}
	return fmt.Errorf("unknown Meta nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MetaMutation) ResetField(name string) error {
	switch name {
	case meta.FieldName:
		m.ResetName()
		return nil
	case meta.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case meta.FieldFavorite:
		m.ResetFavorite()
		return nil
	case meta.FieldFileIndices:
		m.ResetFileIndices()
		return nil
	case meta.FieldRead:
		m.ResetRead()
		return nil
	case meta.FieldActive:
		m.ResetActive()
		return nil
	case meta.FieldHidden:
		m.ResetHidden()
		return nil
	case meta.FieldContainerType:
		m.ResetContainerType()
		return nil
	case meta.FieldThumbnailIndex:
		m.ResetThumbnailIndex()
		return nil
	case meta.FieldThumbnailX:
		m.ResetThumbnailX()
		return nil
	case meta.FieldThumbnailY:
		m.ResetThumbnailY()
		return nil
	case meta.FieldThumbnailWidth:
		m.ResetThumbnailWidth()
		return nil
	case meta.FieldThumbnailHeight:
		m.ResetThumbnailHeight()
		return nil
	}
	return fmt.Errorf("unknown Meta field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MetaMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.tags != nil {
		edges = append(edges, meta.EdgeTags)
	}
	if m.histories != nil {
		edges = append(edges, meta.EdgeHistories)
	}
	if m.favorite_of_user != nil {
		edges = append(edges, meta.EdgeFavoriteOfUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MetaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case meta.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case meta.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.histories))
		for id := range m.histories {
			ids = append(ids, id)
		}
		return ids
	case meta.EdgeFavoriteOfUser:
		ids := make([]ent.Value, 0, len(m.favorite_of_user))
		for id := range m.favorite_of_user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MetaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtags != nil {
		edges = append(edges, meta.EdgeTags)
	}
	if m.removedhistories != nil {
		edges = append(edges, meta.EdgeHistories)
	}
	if m.removedfavorite_of_user != nil {
		edges = append(edges, meta.EdgeFavoriteOfUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MetaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case meta.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case meta.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.removedhistories))
		for id := range m.removedhistories {
			ids = append(ids, id)
		}
		return ids
	case meta.EdgeFavoriteOfUser:
		ids := make([]ent.Value, 0, len(m.removedfavorite_of_user))
		for id := range m.removedfavorite_of_user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MetaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtags {
		edges = append(edges, meta.EdgeTags)
	}
	if m.clearedhistories {
		edges = append(edges, meta.EdgeHistories)
	}
	if m.clearedfavorite_of_user {
		edges = append(edges, meta.EdgeFavoriteOfUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MetaMutation) EdgeCleared(name string) bool {
	switch name {
	case meta.EdgeTags:
		return m.clearedtags
	case meta.EdgeHistories:
		return m.clearedhistories
	case meta.EdgeFavoriteOfUser:
		return m.clearedfavorite_of_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MetaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Meta unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MetaMutation) ResetEdge(name string) error {
	switch name {
	case meta.EdgeTags:
		m.ResetTags()
		return nil
	case meta.EdgeHistories:
		m.ResetHistories()
		return nil
	case meta.EdgeFavoriteOfUser:
		m.ResetFavoriteOfUser()
		return nil
	}
	return fmt.Errorf("unknown Meta edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	favorite                *bool
	hidden                  *bool
	clearedFields           map[string]struct{}
	meta                    map[int]struct{}
	removedmeta             map[int]struct{}
	clearedmeta             bool
	favorite_of_user        map[int]struct{}
	removedfavorite_of_user map[int]struct{}
	clearedfavorite_of_user bool
	done                    bool
	oldValue                func(context.Context) (*Tag, error)
	predicates              []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TagMutation) ResetName() {
	m.name = nil
}

// SetFavorite sets the "favorite" field.
func (m *TagMutation) SetFavorite(b bool) {
	m.favorite = &b
}

// Favorite returns the value of the "favorite" field in the mutation.
func (m *TagMutation) Favorite() (r bool, exists bool) {
	v := m.favorite
	if v == nil {
		return
	}
	return *v, true
}

// OldFavorite returns the old "favorite" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldFavorite(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFavorite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFavorite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFavorite: %w", err)
	}
	return oldValue.Favorite, nil
}

// ResetFavorite resets all changes to the "favorite" field.
func (m *TagMutation) ResetFavorite() {
	m.favorite = nil
}

// SetHidden sets the "hidden" field.
func (m *TagMutation) SetHidden(b bool) {
	m.hidden = &b
}

// Hidden returns the value of the "hidden" field in the mutation.
func (m *TagMutation) Hidden() (r bool, exists bool) {
	v := m.hidden
	if v == nil {
		return
	}
	return *v, true
}

// OldHidden returns the old "hidden" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldHidden(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHidden is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHidden requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHidden: %w", err)
	}
	return oldValue.Hidden, nil
}

// ResetHidden resets all changes to the "hidden" field.
func (m *TagMutation) ResetHidden() {
	m.hidden = nil
}

// AddMetumIDs adds the "meta" edge to the Meta entity by ids.
func (m *TagMutation) AddMetumIDs(ids ...int) {
	if m.meta == nil {
		m.meta = make(map[int]struct{})
	}
	for i := range ids {
		m.meta[ids[i]] = struct{}{}
	}
}

// ClearMeta clears the "meta" edge to the Meta entity.
func (m *TagMutation) ClearMeta() {
	m.clearedmeta = true
}

// MetaCleared reports if the "meta" edge to the Meta entity was cleared.
func (m *TagMutation) MetaCleared() bool {
	return m.clearedmeta
}

// RemoveMetumIDs removes the "meta" edge to the Meta entity by IDs.
func (m *TagMutation) RemoveMetumIDs(ids ...int) {
	if m.removedmeta == nil {
		m.removedmeta = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.meta, ids[i])
		m.removedmeta[ids[i]] = struct{}{}
	}
}

// RemovedMeta returns the removed IDs of the "meta" edge to the Meta entity.
func (m *TagMutation) RemovedMetaIDs() (ids []int) {
	for id := range m.removedmeta {
		ids = append(ids, id)
	}
	return
}

// MetaIDs returns the "meta" edge IDs in the mutation.
func (m *TagMutation) MetaIDs() (ids []int) {
	for id := range m.meta {
		ids = append(ids, id)
	}
	return
}

// ResetMeta resets all changes to the "meta" edge.
func (m *TagMutation) ResetMeta() {
	m.meta = nil
	m.clearedmeta = false
	m.removedmeta = nil
}

// AddFavoriteOfUserIDs adds the "favorite_of_user" edge to the User entity by ids.
func (m *TagMutation) AddFavoriteOfUserIDs(ids ...int) {
	if m.favorite_of_user == nil {
		m.favorite_of_user = make(map[int]struct{})
	}
	for i := range ids {
		m.favorite_of_user[ids[i]] = struct{}{}
	}
}

// ClearFavoriteOfUser clears the "favorite_of_user" edge to the User entity.
func (m *TagMutation) ClearFavoriteOfUser() {
	m.clearedfavorite_of_user = true
}

// FavoriteOfUserCleared reports if the "favorite_of_user" edge to the User entity was cleared.
func (m *TagMutation) FavoriteOfUserCleared() bool {
	return m.clearedfavorite_of_user
}

// RemoveFavoriteOfUserIDs removes the "favorite_of_user" edge to the User entity by IDs.
func (m *TagMutation) RemoveFavoriteOfUserIDs(ids ...int) {
	if m.removedfavorite_of_user == nil {
		m.removedfavorite_of_user = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.favorite_of_user, ids[i])
		m.removedfavorite_of_user[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteOfUser returns the removed IDs of the "favorite_of_user" edge to the User entity.
func (m *TagMutation) RemovedFavoriteOfUserIDs() (ids []int) {
	for id := range m.removedfavorite_of_user {
		ids = append(ids, id)
	}
	return
}

// FavoriteOfUserIDs returns the "favorite_of_user" edge IDs in the mutation.
func (m *TagMutation) FavoriteOfUserIDs() (ids []int) {
	for id := range m.favorite_of_user {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteOfUser resets all changes to the "favorite_of_user" edge.
func (m *TagMutation) ResetFavoriteOfUser() {
	m.favorite_of_user = nil
	m.clearedfavorite_of_user = false
	m.removedfavorite_of_user = nil
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, tag.FieldName)
	}
	if m.favorite != nil {
		fields = append(fields, tag.FieldFavorite)
	}
	if m.hidden != nil {
		fields = append(fields, tag.FieldHidden)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldName:
		return m.Name()
	case tag.FieldFavorite:
		return m.Favorite()
	case tag.FieldHidden:
		return m.Hidden()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldName:
		return m.OldName(ctx)
	case tag.FieldFavorite:
		return m.OldFavorite(ctx)
	case tag.FieldHidden:
		return m.OldHidden(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tag.FieldFavorite:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFavorite(v)
		return nil
	case tag.FieldHidden:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHidden(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldName:
		m.ResetName()
		return nil
	case tag.FieldFavorite:
		m.ResetFavorite()
		return nil
	case tag.FieldHidden:
		m.ResetHidden()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.meta != nil {
		edges = append(edges, tag.EdgeMeta)
	}
	if m.favorite_of_user != nil {
		edges = append(edges, tag.EdgeFavoriteOfUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeMeta:
		ids := make([]ent.Value, 0, len(m.meta))
		for id := range m.meta {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgeFavoriteOfUser:
		ids := make([]ent.Value, 0, len(m.favorite_of_user))
		for id := range m.favorite_of_user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmeta != nil {
		edges = append(edges, tag.EdgeMeta)
	}
	if m.removedfavorite_of_user != nil {
		edges = append(edges, tag.EdgeFavoriteOfUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeMeta:
		ids := make([]ent.Value, 0, len(m.removedmeta))
		for id := range m.removedmeta {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgeFavoriteOfUser:
		ids := make([]ent.Value, 0, len(m.removedfavorite_of_user))
		for id := range m.removedfavorite_of_user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmeta {
		edges = append(edges, tag.EdgeMeta)
	}
	if m.clearedfavorite_of_user {
		edges = append(edges, tag.EdgeFavoriteOfUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeMeta:
		return m.clearedmeta
	case tag.EdgeFavoriteOfUser:
		return m.clearedfavorite_of_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeMeta:
		m.ResetMeta()
		return nil
	case tag.EdgeFavoriteOfUser:
		m.ResetFavoriteOfUser()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	email                 *string
	active                *bool
	clearedFields         map[string]struct{}
	favorite_items        map[int]struct{}
	removedfavorite_items map[int]struct{}
	clearedfavorite_items bool
	favorite_tags         map[int]struct{}
	removedfavorite_tags  map[int]struct{}
	clearedfavorite_tags  bool
	histories             map[int]struct{}
	removedhistories      map[int]struct{}
	clearedhistories      bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// AddFavoriteItemIDs adds the "favorite_items" edge to the Meta entity by ids.
func (m *UserMutation) AddFavoriteItemIDs(ids ...int) {
	if m.favorite_items == nil {
		m.favorite_items = make(map[int]struct{})
	}
	for i := range ids {
		m.favorite_items[ids[i]] = struct{}{}
	}
}

// ClearFavoriteItems clears the "favorite_items" edge to the Meta entity.
func (m *UserMutation) ClearFavoriteItems() {
	m.clearedfavorite_items = true
}

// FavoriteItemsCleared reports if the "favorite_items" edge to the Meta entity was cleared.
func (m *UserMutation) FavoriteItemsCleared() bool {
	return m.clearedfavorite_items
}

// RemoveFavoriteItemIDs removes the "favorite_items" edge to the Meta entity by IDs.
func (m *UserMutation) RemoveFavoriteItemIDs(ids ...int) {
	if m.removedfavorite_items == nil {
		m.removedfavorite_items = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.favorite_items, ids[i])
		m.removedfavorite_items[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteItems returns the removed IDs of the "favorite_items" edge to the Meta entity.
func (m *UserMutation) RemovedFavoriteItemsIDs() (ids []int) {
	for id := range m.removedfavorite_items {
		ids = append(ids, id)
	}
	return
}

// FavoriteItemsIDs returns the "favorite_items" edge IDs in the mutation.
func (m *UserMutation) FavoriteItemsIDs() (ids []int) {
	for id := range m.favorite_items {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteItems resets all changes to the "favorite_items" edge.
func (m *UserMutation) ResetFavoriteItems() {
	m.favorite_items = nil
	m.clearedfavorite_items = false
	m.removedfavorite_items = nil
}

// AddFavoriteTagIDs adds the "favorite_tags" edge to the Tag entity by ids.
func (m *UserMutation) AddFavoriteTagIDs(ids ...int) {
	if m.favorite_tags == nil {
		m.favorite_tags = make(map[int]struct{})
	}
	for i := range ids {
		m.favorite_tags[ids[i]] = struct{}{}
	}
}

// ClearFavoriteTags clears the "favorite_tags" edge to the Tag entity.
func (m *UserMutation) ClearFavoriteTags() {
	m.clearedfavorite_tags = true
}

// FavoriteTagsCleared reports if the "favorite_tags" edge to the Tag entity was cleared.
func (m *UserMutation) FavoriteTagsCleared() bool {
	return m.clearedfavorite_tags
}

// RemoveFavoriteTagIDs removes the "favorite_tags" edge to the Tag entity by IDs.
func (m *UserMutation) RemoveFavoriteTagIDs(ids ...int) {
	if m.removedfavorite_tags == nil {
		m.removedfavorite_tags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.favorite_tags, ids[i])
		m.removedfavorite_tags[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteTags returns the removed IDs of the "favorite_tags" edge to the Tag entity.
func (m *UserMutation) RemovedFavoriteTagsIDs() (ids []int) {
	for id := range m.removedfavorite_tags {
		ids = append(ids, id)
	}
	return
}

// FavoriteTagsIDs returns the "favorite_tags" edge IDs in the mutation.
func (m *UserMutation) FavoriteTagsIDs() (ids []int) {
	for id := range m.favorite_tags {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteTags resets all changes to the "favorite_tags" edge.
func (m *UserMutation) ResetFavoriteTags() {
	m.favorite_tags = nil
	m.clearedfavorite_tags = false
	m.removedfavorite_tags = nil
}

// AddHistoryIDs adds the "histories" edge to the History entity by ids.
func (m *UserMutation) AddHistoryIDs(ids ...int) {
	if m.histories == nil {
		m.histories = make(map[int]struct{})
	}
	for i := range ids {
		m.histories[ids[i]] = struct{}{}
	}
}

// ClearHistories clears the "histories" edge to the History entity.
func (m *UserMutation) ClearHistories() {
	m.clearedhistories = true
}

// HistoriesCleared reports if the "histories" edge to the History entity was cleared.
func (m *UserMutation) HistoriesCleared() bool {
	return m.clearedhistories
}

// RemoveHistoryIDs removes the "histories" edge to the History entity by IDs.
func (m *UserMutation) RemoveHistoryIDs(ids ...int) {
	if m.removedhistories == nil {
		m.removedhistories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.histories, ids[i])
		m.removedhistories[ids[i]] = struct{}{}
	}
}

// RemovedHistories returns the removed IDs of the "histories" edge to the History entity.
func (m *UserMutation) RemovedHistoriesIDs() (ids []int) {
	for id := range m.removedhistories {
		ids = append(ids, id)
	}
	return
}

// HistoriesIDs returns the "histories" edge IDs in the mutation.
func (m *UserMutation) HistoriesIDs() (ids []int) {
	for id := range m.histories {
		ids = append(ids, id)
	}
	return
}

// ResetHistories resets all changes to the "histories" edge.
func (m *UserMutation) ResetHistories() {
	m.histories = nil
	m.clearedhistories = false
	m.removedhistories = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.favorite_items != nil {
		edges = append(edges, user.EdgeFavoriteItems)
	}
	if m.favorite_tags != nil {
		edges = append(edges, user.EdgeFavoriteTags)
	}
	if m.histories != nil {
		edges = append(edges, user.EdgeHistories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFavoriteItems:
		ids := make([]ent.Value, 0, len(m.favorite_items))
		for id := range m.favorite_items {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavoriteTags:
		ids := make([]ent.Value, 0, len(m.favorite_tags))
		for id := range m.favorite_tags {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.histories))
		for id := range m.histories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfavorite_items != nil {
		edges = append(edges, user.EdgeFavoriteItems)
	}
	if m.removedfavorite_tags != nil {
		edges = append(edges, user.EdgeFavoriteTags)
	}
	if m.removedhistories != nil {
		edges = append(edges, user.EdgeHistories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFavoriteItems:
		ids := make([]ent.Value, 0, len(m.removedfavorite_items))
		for id := range m.removedfavorite_items {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavoriteTags:
		ids := make([]ent.Value, 0, len(m.removedfavorite_tags))
		for id := range m.removedfavorite_tags {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHistories:
		ids := make([]ent.Value, 0, len(m.removedhistories))
		for id := range m.removedhistories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfavorite_items {
		edges = append(edges, user.EdgeFavoriteItems)
	}
	if m.clearedfavorite_tags {
		edges = append(edges, user.EdgeFavoriteTags)
	}
	if m.clearedhistories {
		edges = append(edges, user.EdgeHistories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFavoriteItems:
		return m.clearedfavorite_items
	case user.EdgeFavoriteTags:
		return m.clearedfavorite_tags
	case user.EdgeHistories:
		return m.clearedhistories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFavoriteItems:
		m.ResetFavoriteItems()
		return nil
	case user.EdgeFavoriteTags:
		m.ResetFavoriteTags()
		return nil
	case user.EdgeHistories:
		m.ResetHistories()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
