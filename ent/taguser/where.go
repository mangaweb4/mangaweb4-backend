// Code generated by ent, DO NOT EDIT.

package taguser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mangaweb4/mangaweb4-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TagUser {
	return predicate.TagUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TagUser {
	return predicate.TagUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TagUser {
	return predicate.TagUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TagUser {
	return predicate.TagUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TagUser {
	return predicate.TagUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TagUser {
	return predicate.TagUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TagUser {
	return predicate.TagUser(sql.FieldLTE(FieldID, id))
}

// TagID applies equality check predicate on the "tag_id" field. It's identical to TagIDEQ.
func TagID(v int) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldTagID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldUserID, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldIsRead, v))
}

// IsFavorite applies equality check predicate on the "is_favorite" field. It's identical to IsFavoriteEQ.
func IsFavorite(v bool) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldIsFavorite, v))
}

// TagIDEQ applies the EQ predicate on the "tag_id" field.
func TagIDEQ(v int) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldTagID, v))
}

// TagIDNEQ applies the NEQ predicate on the "tag_id" field.
func TagIDNEQ(v int) predicate.TagUser {
	return predicate.TagUser(sql.FieldNEQ(FieldTagID, v))
}

// TagIDIn applies the In predicate on the "tag_id" field.
func TagIDIn(vs ...int) predicate.TagUser {
	return predicate.TagUser(sql.FieldIn(FieldTagID, vs...))
}

// TagIDNotIn applies the NotIn predicate on the "tag_id" field.
func TagIDNotIn(vs ...int) predicate.TagUser {
	return predicate.TagUser(sql.FieldNotIn(FieldTagID, vs...))
}

// TagIDIsNil applies the IsNil predicate on the "tag_id" field.
func TagIDIsNil() predicate.TagUser {
	return predicate.TagUser(sql.FieldIsNull(FieldTagID))
}

// TagIDNotNil applies the NotNil predicate on the "tag_id" field.
func TagIDNotNil() predicate.TagUser {
	return predicate.TagUser(sql.FieldNotNull(FieldTagID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.TagUser {
	return predicate.TagUser(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.TagUser {
	return predicate.TagUser(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.TagUser {
	return predicate.TagUser(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.TagUser {
	return predicate.TagUser(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.TagUser {
	return predicate.TagUser(sql.FieldNotNull(FieldUserID))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v bool) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v bool) predicate.TagUser {
	return predicate.TagUser(sql.FieldNEQ(FieldIsRead, v))
}

// IsFavoriteEQ applies the EQ predicate on the "is_favorite" field.
func IsFavoriteEQ(v bool) predicate.TagUser {
	return predicate.TagUser(sql.FieldEQ(FieldIsFavorite, v))
}

// IsFavoriteNEQ applies the NEQ predicate on the "is_favorite" field.
func IsFavoriteNEQ(v bool) predicate.TagUser {
	return predicate.TagUser(sql.FieldNEQ(FieldIsFavorite, v))
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.TagUser {
	return predicate.TagUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tag) predicate.TagUser {
	return predicate.TagUser(func(s *sql.Selector) {
		step := newTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TagUser {
	return predicate.TagUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TagUser {
	return predicate.TagUser(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TagUser) predicate.TagUser {
	return predicate.TagUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TagUser) predicate.TagUser {
	return predicate.TagUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TagUser) predicate.TagUser {
	return predicate.TagUser(sql.NotPredicates(p))
}
