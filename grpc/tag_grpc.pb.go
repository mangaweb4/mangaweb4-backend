// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tag.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tag_List_FullMethodName        = "/Tag/List"
	Tag_Thumbnail_FullMethodName   = "/Tag/Thumbnail"
	Tag_SetFavorite_FullMethodName = "/Tag/SetFavorite"
)

// TagClient is the client API for Tag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagClient interface {
	List(ctx context.Context, in *TagListRequest, opts ...grpc.CallOption) (*TagListResponse, error)
	Thumbnail(ctx context.Context, in *TagThumbnailRequest, opts ...grpc.CallOption) (*TagThumbnailResponse, error)
	SetFavorite(ctx context.Context, in *TagSetFavoriteRequest, opts ...grpc.CallOption) (*TagSetFavoriteResponse, error)
}

type tagClient struct {
	cc grpc.ClientConnInterface
}

func NewTagClient(cc grpc.ClientConnInterface) TagClient {
	return &tagClient{cc}
}

func (c *tagClient) List(ctx context.Context, in *TagListRequest, opts ...grpc.CallOption) (*TagListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagListResponse)
	err := c.cc.Invoke(ctx, Tag_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) Thumbnail(ctx context.Context, in *TagThumbnailRequest, opts ...grpc.CallOption) (*TagThumbnailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagThumbnailResponse)
	err := c.cc.Invoke(ctx, Tag_Thumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) SetFavorite(ctx context.Context, in *TagSetFavoriteRequest, opts ...grpc.CallOption) (*TagSetFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagSetFavoriteResponse)
	err := c.cc.Invoke(ctx, Tag_SetFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServer is the server API for Tag service.
// All implementations must embed UnimplementedTagServer
// for forward compatibility.
type TagServer interface {
	List(context.Context, *TagListRequest) (*TagListResponse, error)
	Thumbnail(context.Context, *TagThumbnailRequest) (*TagThumbnailResponse, error)
	SetFavorite(context.Context, *TagSetFavoriteRequest) (*TagSetFavoriteResponse, error)
	mustEmbedUnimplementedTagServer()
}

// UnimplementedTagServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTagServer struct{}

func (UnimplementedTagServer) List(context.Context, *TagListRequest) (*TagListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTagServer) Thumbnail(context.Context, *TagThumbnailRequest) (*TagThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumbnail not implemented")
}
func (UnimplementedTagServer) SetFavorite(context.Context, *TagSetFavoriteRequest) (*TagSetFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFavorite not implemented")
}
func (UnimplementedTagServer) mustEmbedUnimplementedTagServer() {}
func (UnimplementedTagServer) testEmbeddedByValue()             {}

// UnsafeTagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServer will
// result in compilation errors.
type UnsafeTagServer interface {
	mustEmbedUnimplementedTagServer()
}

func RegisterTagServer(s grpc.ServiceRegistrar, srv TagServer) {
	// If the following call pancis, it indicates UnimplementedTagServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tag_ServiceDesc, srv)
}

func _Tag_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).List(ctx, req.(*TagListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_Thumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).Thumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_Thumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).Thumbnail(ctx, req.(*TagThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_SetFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagSetFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).SetFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_SetFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).SetFavorite(ctx, req.(*TagSetFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tag_ServiceDesc is the grpc.ServiceDesc for Tag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tag",
	HandlerType: (*TagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Tag_List_Handler,
		},
		{
			MethodName: "Thumbnail",
			Handler:    _Tag_Thumbnail_Handler,
		},
		{
			MethodName: "SetFavorite",
			Handler:    _Tag_SetFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}
