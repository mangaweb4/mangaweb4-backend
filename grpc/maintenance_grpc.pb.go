// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: maintenance.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Maintenance_PurgeCache_FullMethodName    = "/Maintenance/PurgeCache"
	Maintenance_UpdateLibrary_FullMethodName = "/Maintenance/UpdateLibrary"
	Maintenance_PopulateTags_FullMethodName  = "/Maintenance/PopulateTags"
)

// MaintenanceClient is the client API for Maintenance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceClient interface {
	PurgeCache(ctx context.Context, in *MaintenancePurgeCacheRequest, opts ...grpc.CallOption) (*MaintenancePurgeCacheResponse, error)
	UpdateLibrary(ctx context.Context, in *MaintenanceUpdateLibraryRequest, opts ...grpc.CallOption) (*MaintenanceUpdateLibraryResponse, error)
	PopulateTags(ctx context.Context, in *MaintenancePopulateTagsRequest, opts ...grpc.CallOption) (*MaintenancePopulateTagsResponse, error)
}

type maintenanceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceClient(cc grpc.ClientConnInterface) MaintenanceClient {
	return &maintenanceClient{cc}
}

func (c *maintenanceClient) PurgeCache(ctx context.Context, in *MaintenancePurgeCacheRequest, opts ...grpc.CallOption) (*MaintenancePurgeCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenancePurgeCacheResponse)
	err := c.cc.Invoke(ctx, Maintenance_PurgeCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceClient) UpdateLibrary(ctx context.Context, in *MaintenanceUpdateLibraryRequest, opts ...grpc.CallOption) (*MaintenanceUpdateLibraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenanceUpdateLibraryResponse)
	err := c.cc.Invoke(ctx, Maintenance_UpdateLibrary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceClient) PopulateTags(ctx context.Context, in *MaintenancePopulateTagsRequest, opts ...grpc.CallOption) (*MaintenancePopulateTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenancePopulateTagsResponse)
	err := c.cc.Invoke(ctx, Maintenance_PopulateTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceServer is the server API for Maintenance service.
// All implementations must embed UnimplementedMaintenanceServer
// for forward compatibility.
type MaintenanceServer interface {
	PurgeCache(context.Context, *MaintenancePurgeCacheRequest) (*MaintenancePurgeCacheResponse, error)
	UpdateLibrary(context.Context, *MaintenanceUpdateLibraryRequest) (*MaintenanceUpdateLibraryResponse, error)
	PopulateTags(context.Context, *MaintenancePopulateTagsRequest) (*MaintenancePopulateTagsResponse, error)
	mustEmbedUnimplementedMaintenanceServer()
}

// UnimplementedMaintenanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaintenanceServer struct{}

func (UnimplementedMaintenanceServer) PurgeCache(context.Context, *MaintenancePurgeCacheRequest) (*MaintenancePurgeCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeCache not implemented")
}
func (UnimplementedMaintenanceServer) UpdateLibrary(context.Context, *MaintenanceUpdateLibraryRequest) (*MaintenanceUpdateLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLibrary not implemented")
}
func (UnimplementedMaintenanceServer) PopulateTags(context.Context, *MaintenancePopulateTagsRequest) (*MaintenancePopulateTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateTags not implemented")
}
func (UnimplementedMaintenanceServer) mustEmbedUnimplementedMaintenanceServer() {}
func (UnimplementedMaintenanceServer) testEmbeddedByValue()                     {}

// UnsafeMaintenanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceServer will
// result in compilation errors.
type UnsafeMaintenanceServer interface {
	mustEmbedUnimplementedMaintenanceServer()
}

func RegisterMaintenanceServer(s grpc.ServiceRegistrar, srv MaintenanceServer) {
	// If the following call pancis, it indicates UnimplementedMaintenanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Maintenance_ServiceDesc, srv)
}

func _Maintenance_PurgeCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenancePurgeCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).PurgeCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Maintenance_PurgeCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).PurgeCache(ctx, req.(*MaintenancePurgeCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintenance_UpdateLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceUpdateLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).UpdateLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Maintenance_UpdateLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).UpdateLibrary(ctx, req.(*MaintenanceUpdateLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintenance_PopulateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenancePopulateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).PopulateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Maintenance_PopulateTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).PopulateTags(ctx, req.(*MaintenancePopulateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Maintenance_ServiceDesc is the grpc.ServiceDesc for Maintenance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Maintenance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Maintenance",
	HandlerType: (*MaintenanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurgeCache",
			Handler:    _Maintenance_PurgeCache_Handler,
		},
		{
			MethodName: "UpdateLibrary",
			Handler:    _Maintenance_UpdateLibrary_Handler,
		},
		{
			MethodName: "PopulateTags",
			Handler:    _Maintenance_PopulateTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maintenance.proto",
}
