// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: manga.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Manga_List_FullMethodName            = "/Manga/List"
	Manga_Detail_FullMethodName          = "/Manga/Detail"
	Manga_Thumbnail_FullMethodName       = "/Manga/Thumbnail"
	Manga_SetFavorite_FullMethodName     = "/Manga/SetFavorite"
	Manga_SetProgress_FullMethodName     = "/Manga/SetProgress"
	Manga_UpdateCover_FullMethodName     = "/Manga/UpdateCover"
	Manga_PageImage_FullMethodName       = "/Manga/PageImage"
	Manga_PageImageStream_FullMethodName = "/Manga/PageImageStream"
	Manga_Repair_FullMethodName          = "/Manga/Repair"
	Manga_Download_FullMethodName        = "/Manga/Download"
)

// MangaClient is the client API for Manga service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MangaClient interface {
	List(ctx context.Context, in *MangaListRequest, opts ...grpc.CallOption) (*MangaListResponse, error)
	Detail(ctx context.Context, in *MangaDetailRequest, opts ...grpc.CallOption) (*MangaDetailResponse, error)
	Thumbnail(ctx context.Context, in *MangaThumbnailRequest, opts ...grpc.CallOption) (*MangaThumbnailResponse, error)
	SetFavorite(ctx context.Context, in *MangaSetFavoriteRequest, opts ...grpc.CallOption) (*MangaSetFavoriteResponse, error)
	SetProgress(ctx context.Context, in *MangaSetProgressRequest, opts ...grpc.CallOption) (*MangaSetProgressResponse, error)
	UpdateCover(ctx context.Context, in *MangaUpdateCoverRequest, opts ...grpc.CallOption) (*MangaUpdateCoverResponse, error)
	// Deprecated: Do not use.
	PageImage(ctx context.Context, in *MangaPageImageRequest, opts ...grpc.CallOption) (*MangaPageImageResponse, error)
	PageImageStream(ctx context.Context, in *MangaPageImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MangaPageImageStreamResponse], error)
	Repair(ctx context.Context, in *MangaRepairRequest, opts ...grpc.CallOption) (*MangaRepairResponse, error)
	Download(ctx context.Context, in *MangaDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MangaDownloadResponse], error)
}

type mangaClient struct {
	cc grpc.ClientConnInterface
}

func NewMangaClient(cc grpc.ClientConnInterface) MangaClient {
	return &mangaClient{cc}
}

func (c *mangaClient) List(ctx context.Context, in *MangaListRequest, opts ...grpc.CallOption) (*MangaListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaListResponse)
	err := c.cc.Invoke(ctx, Manga_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaClient) Detail(ctx context.Context, in *MangaDetailRequest, opts ...grpc.CallOption) (*MangaDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaDetailResponse)
	err := c.cc.Invoke(ctx, Manga_Detail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaClient) Thumbnail(ctx context.Context, in *MangaThumbnailRequest, opts ...grpc.CallOption) (*MangaThumbnailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaThumbnailResponse)
	err := c.cc.Invoke(ctx, Manga_Thumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaClient) SetFavorite(ctx context.Context, in *MangaSetFavoriteRequest, opts ...grpc.CallOption) (*MangaSetFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaSetFavoriteResponse)
	err := c.cc.Invoke(ctx, Manga_SetFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaClient) SetProgress(ctx context.Context, in *MangaSetProgressRequest, opts ...grpc.CallOption) (*MangaSetProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaSetProgressResponse)
	err := c.cc.Invoke(ctx, Manga_SetProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaClient) UpdateCover(ctx context.Context, in *MangaUpdateCoverRequest, opts ...grpc.CallOption) (*MangaUpdateCoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaUpdateCoverResponse)
	err := c.cc.Invoke(ctx, Manga_UpdateCover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *mangaClient) PageImage(ctx context.Context, in *MangaPageImageRequest, opts ...grpc.CallOption) (*MangaPageImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaPageImageResponse)
	err := c.cc.Invoke(ctx, Manga_PageImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaClient) PageImageStream(ctx context.Context, in *MangaPageImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MangaPageImageStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manga_ServiceDesc.Streams[0], Manga_PageImageStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MangaPageImageRequest, MangaPageImageStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manga_PageImageStreamClient = grpc.ServerStreamingClient[MangaPageImageStreamResponse]

func (c *mangaClient) Repair(ctx context.Context, in *MangaRepairRequest, opts ...grpc.CallOption) (*MangaRepairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaRepairResponse)
	err := c.cc.Invoke(ctx, Manga_Repair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaClient) Download(ctx context.Context, in *MangaDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MangaDownloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manga_ServiceDesc.Streams[1], Manga_Download_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MangaDownloadRequest, MangaDownloadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manga_DownloadClient = grpc.ServerStreamingClient[MangaDownloadResponse]

// MangaServer is the server API for Manga service.
// All implementations must embed UnimplementedMangaServer
// for forward compatibility.
type MangaServer interface {
	List(context.Context, *MangaListRequest) (*MangaListResponse, error)
	Detail(context.Context, *MangaDetailRequest) (*MangaDetailResponse, error)
	Thumbnail(context.Context, *MangaThumbnailRequest) (*MangaThumbnailResponse, error)
	SetFavorite(context.Context, *MangaSetFavoriteRequest) (*MangaSetFavoriteResponse, error)
	SetProgress(context.Context, *MangaSetProgressRequest) (*MangaSetProgressResponse, error)
	UpdateCover(context.Context, *MangaUpdateCoverRequest) (*MangaUpdateCoverResponse, error)
	// Deprecated: Do not use.
	PageImage(context.Context, *MangaPageImageRequest) (*MangaPageImageResponse, error)
	PageImageStream(*MangaPageImageRequest, grpc.ServerStreamingServer[MangaPageImageStreamResponse]) error
	Repair(context.Context, *MangaRepairRequest) (*MangaRepairResponse, error)
	Download(*MangaDownloadRequest, grpc.ServerStreamingServer[MangaDownloadResponse]) error
	mustEmbedUnimplementedMangaServer()
}

// UnimplementedMangaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMangaServer struct{}

func (UnimplementedMangaServer) List(context.Context, *MangaListRequest) (*MangaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMangaServer) Detail(context.Context, *MangaDetailRequest) (*MangaDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedMangaServer) Thumbnail(context.Context, *MangaThumbnailRequest) (*MangaThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumbnail not implemented")
}
func (UnimplementedMangaServer) SetFavorite(context.Context, *MangaSetFavoriteRequest) (*MangaSetFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFavorite not implemented")
}
func (UnimplementedMangaServer) SetProgress(context.Context, *MangaSetProgressRequest) (*MangaSetProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProgress not implemented")
}
func (UnimplementedMangaServer) UpdateCover(context.Context, *MangaUpdateCoverRequest) (*MangaUpdateCoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCover not implemented")
}
func (UnimplementedMangaServer) PageImage(context.Context, *MangaPageImageRequest) (*MangaPageImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageImage not implemented")
}
func (UnimplementedMangaServer) PageImageStream(*MangaPageImageRequest, grpc.ServerStreamingServer[MangaPageImageStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PageImageStream not implemented")
}
func (UnimplementedMangaServer) Repair(context.Context, *MangaRepairRequest) (*MangaRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Repair not implemented")
}
func (UnimplementedMangaServer) Download(*MangaDownloadRequest, grpc.ServerStreamingServer[MangaDownloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedMangaServer) mustEmbedUnimplementedMangaServer() {}
func (UnimplementedMangaServer) testEmbeddedByValue()               {}

// UnsafeMangaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MangaServer will
// result in compilation errors.
type UnsafeMangaServer interface {
	mustEmbedUnimplementedMangaServer()
}

func RegisterMangaServer(s grpc.ServiceRegistrar, srv MangaServer) {
	// If the following call pancis, it indicates UnimplementedMangaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Manga_ServiceDesc, srv)
}

func _Manga_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).List(ctx, req.(*MangaListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).Detail(ctx, req.(*MangaDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_Thumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).Thumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_Thumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).Thumbnail(ctx, req.(*MangaThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_SetFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaSetFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).SetFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_SetFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).SetFavorite(ctx, req.(*MangaSetFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_SetProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaSetProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).SetProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_SetProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).SetProgress(ctx, req.(*MangaSetProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_UpdateCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaUpdateCoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).UpdateCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_UpdateCover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).UpdateCover(ctx, req.(*MangaUpdateCoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_PageImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaPageImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).PageImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_PageImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).PageImage(ctx, req.(*MangaPageImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_PageImageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MangaPageImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MangaServer).PageImageStream(m, &grpc.GenericServerStream[MangaPageImageRequest, MangaPageImageStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manga_PageImageStreamServer = grpc.ServerStreamingServer[MangaPageImageStreamResponse]

func _Manga_Repair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServer).Repair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manga_Repair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServer).Repair(ctx, req.(*MangaRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manga_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MangaDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MangaServer).Download(m, &grpc.GenericServerStream[MangaDownloadRequest, MangaDownloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manga_DownloadServer = grpc.ServerStreamingServer[MangaDownloadResponse]

// Manga_ServiceDesc is the grpc.ServiceDesc for Manga service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manga_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Manga",
	HandlerType: (*MangaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Manga_List_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Manga_Detail_Handler,
		},
		{
			MethodName: "Thumbnail",
			Handler:    _Manga_Thumbnail_Handler,
		},
		{
			MethodName: "SetFavorite",
			Handler:    _Manga_SetFavorite_Handler,
		},
		{
			MethodName: "SetProgress",
			Handler:    _Manga_SetProgress_Handler,
		},
		{
			MethodName: "UpdateCover",
			Handler:    _Manga_UpdateCover_Handler,
		},
		{
			MethodName: "PageImage",
			Handler:    _Manga_PageImage_Handler,
		},
		{
			MethodName: "Repair",
			Handler:    _Manga_Repair_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PageImageStream",
			Handler:       _Manga_PageImageStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Manga_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manga.proto",
}
